[
   {
      "id": "1",
      "en_ques": "list all boardgames by gmt.",
      "en_key": "boardgame, gmt",
      "de_ques": "liste alle brettspiele von gmt. ",
      "de_key": "brettspiel ,  gmt",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
      "entities": [
         "GMT_Games"
      ],
      "relations": [
         "publisher"
      ],
      "fil_sparql": "SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }"
   },
   {
      "id": "2",
      "en_ques": "who developed skype?",
      "en_key": "develop, skype",
      "de_ques": "wer entwickelt skype? ",
      "de_key": "entwickeln ,  skype ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
      "entities": [
         "Skype"
      ],
      "relations": [
         "developer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }"
   },
   {
      "id": "3",
      "en_ques": "which people were born in heraklion?",
      "en_key": "people, born, heraklion",
      "de_ques": "welche menschen wurden geboren im heraklion? ",
      "de_key": "menschen ,  geboren ,  heraklion ",
      "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
      "entities": [
         "Heraklion"
      ],
      "relations": [
         "Person",
         "birthPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace dbr:Heraklion. }"
   },
   {
      "id": "4",
      "en_ques": "in which u.s. state is area 51 located?",
      "en_key": "area 51, located, u.s. state",
      "de_ques": "im welche us zustand ist bereich 51 gelegen? ",
      "de_key": "bereich 51 ,  gelegen ,  us zustand ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
      "entities": [
         "Area_51",
         "United_States."
      ],
      "relations": [
         "location",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }"
   },
   {
      "id": "5",
      "en_ques": "who is the mayor of new york city?",
      "en_key": "new york city, mayor",
      "de_ques": "wer ist der b\u00fcrgermeister von new york city?",
      "de_key": "new york city, b\u00fcrgermeister",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
      "entities": [
         "New_York_City"
      ],
      "relations": [
         "leaderName"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }"
   },
   {
      "id": "6",
      "en_ques": "which countries have places with more than two caves?",
      "en_key": "country, place, cave, more than two",
      "de_ques": "in welchen l\u00e4ndern gibt es orte mit mehr als zwei h\u00f6hlen?",
      "de_key": "land, ort, h\u00f6hle, mehr als zwei",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
      "entities": [],
      "relations": [
         "Cave",
         "location",
         "Country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )"
   },
   {
      "id": "7",
      "en_ques": "where did abraham lincoln die?",
      "en_key": "abraham lincoln, die",
      "de_ques": "woher hat getan abraham lincoln die? ",
      "de_key": "abraham lincoln ,  die ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
      "entities": [
         "Abraham_Lincoln"
      ],
      "relations": [
         "deathPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }"
   },
   {
      "id": "8",
      "en_ques": "which airports does air china serve?",
      "en_key": "airports, air china",
      "de_ques": "welche flugh\u00e4fen fliegt air china an?",
      "de_key": "flugh\u00e4fen, anfliegen, air china",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
      "entities": [
         "Air_China"
      ],
      "relations": [
         "targetAirport"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }"
   },
   {
      "id": "9",
      "en_ques": "give me all actors starring in movies directed by and starring william shatner.",
      "en_key": "actor, starring, movie, direct, starring, william shatner",
      "de_ques": "gib mir alle schauspieler von filmen, in denen william shatner sowohl regie gef\u00fchrt als auch selber mitgespielt hat.",
      "de_key": "film, schauspieler, regie, mitspielen, william shatner",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
      "entities": [
         "William_Shatner",
         "William_Shatner"
      ],
      "relations": [
         "director",
         "starring",
         "starring",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }"
   },
   {
      "id": "10",
      "en_ques": "what are the official languages of the philippines?",
      "en_key": "philippines, official language",
      "de_ques": "was sind die amtssprachen der philippinen?",
      "de_key": "philippinen, amtssprache",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
      "entities": [
         "Philippines"
      ],
      "relations": [
         "officialLanguage"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }"
   },
   {
      "id": "11",
      "en_ques": "give me all danish films.",
      "en_key": "film, denmark",
      "de_ques": "gib mir alle d\u00e4nischen filme.",
      "de_key": "film, d\u00e4nemark",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
      "entities": [
         "Denmark"
      ],
      "relations": [
         "Film",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }"
   },
   {
      "id": "12",
      "en_ques": "which movies starring brad pitt were directed by guy ritchie?",
      "en_key": "movies, starring, brad pitt, directed, guy ritchie",
      "de_ques": "bei welchen filmen, in denen brad pitt mitspielt, hat guy ritchie regie gef\u00fchrt?",
      "de_key": "filme, mitspielen, brad pitt, regie f\u00fchren, guy ritchie",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
      "entities": [
         "Brad_Pitt",
         "Guy_Ritchie"
      ],
      "relations": [
         "Film",
         "starring",
         "director"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }"
   },
   {
      "id": "13",
      "en_ques": "give me the grandchildren of bruce lee.",
      "en_key": "bruce lee, grandchildren",
      "de_ques": "gib mir die enkel von bruce lee.",
      "de_key": "bruce lee, enkel",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
      "entities": [
         "Bruce_Lee"
      ],
      "relations": [
         "children",
         "child"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child dbp:children ?uri }"
   },
   {
      "id": "14",
      "en_ques": "which other weapons did the designer of the uzi develop?",
      "en_key": "uzi, designer, develop, weapon",
      "de_ques": "welche anderen waffen hat der erfinder der uzi entwickelt?",
      "de_key": "uzi, erfinder, waffe",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
      "entities": [
         "Uzi",
         "Uzi"
      ],
      "relations": [
         "Weapon",
         "designer",
         "designer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }"
   },
   {
      "id": "15",
      "en_ques": "who is the owner of universal studios?",
      "en_key": "universal studios, owner",
      "de_ques": "wem geh\u00f6ren die universal studios?",
      "de_key": "universal studios, geh\u00f6ren",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
      "entities": [
         "Universal_Studios"
      ],
      "relations": [
         "owner"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }"
   },
   {
      "id": "16",
      "en_ques": "which state of the usa has the highest population density?",
      "en_key": "state, usa, population density, highest",
      "de_ques": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte?",
      "de_key": "staat, usa, bev\u00f6lkerungsdichte, h\u00f6chste",
      "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
      "entities": [],
      "relations": [
         "densityrank",
         "WikicatStatesOfTheUnitedStates"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1"
   },
   {
      "id": "17",
      "en_ques": "which monarchs were married to a german?",
      "en_key": "monarch, married, german",
      "de_ques": "welche monarchen waren mit jemand deutschem verheiratet?",
      "de_key": "monarch, verheiratet, deutsch",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
      "entities": [
         "Germany",
         "Germany"
      ],
      "relations": [
         "Monarch",
         "spouse",
         "birthPlace",
         "birthPlace",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }"
   },
   {
      "id": "18",
      "en_ques": "which organizations were founded in 1950?",
      "en_key": "organization, founded, 1950",
      "de_ques": "welche unternehmen wurden 1950 gegr\u00fcndet?",
      "de_key": "unternehmen, gr\u00fcnden, 1950",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') }",
      "entities": [],
      "relations": [
         "Organisation",
         "formationYear",
         "foundingYear",
         "foundation",
         "formation"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') }"
   },
   {
      "id": "19",
      "en_ques": "who created the comic captain america?",
      "en_key": "comic, captain america, create",
      "de_ques": "wer hat den comic captain america erfunden?",
      "de_key": "comic, captain america, erfinden",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
      "entities": [
         "Captain_America"
      ],
      "relations": [
         "creator"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }"
   },
   {
      "id": "20",
      "en_ques": "give me the apollo 14 astronauts.",
      "en_key": "astronaut, apollo 14",
      "de_ques": "gib mir alle apollo-14-astronauten.",
      "de_key": "astronaut, apollo 14",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
      "entities": [
         "Apollo_14"
      ],
      "relations": [
         "mission"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }"
   },
   {
      "id": "21",
      "en_ques": "who wrote the book the pillars of the earth?",
      "en_key": "wrote, book, the pillars of the earth",
      "de_ques": "wer schrieb das buch das s\u00e4ulen von das erde? ",
      "de_key": "schrieb ,  buch ,  das s\u00e4ulen von das erde ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
      "entities": [
         "The_Pillars_of_the_Earth"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }"
   },
   {
      "id": "22",
      "en_ques": "which state of the united states of america has the highest density?",
      "en_key": "state, united, states, america, highest, density",
      "de_ques": "welche zustand von das vereinigt zust\u00e4nde von amerika hat das h\u00f6chste dichte? ",
      "de_key": "zustand ,  vereinigt ,  zust\u00e4nde ,  amerika ,  h\u00f6chste ,  dichte ",
      "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
      "entities": [],
      "relations": [
         "densityrank"
      ],
      "fil_sparql": "SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1"
   },
   {
      "id": "23",
      "en_ques": "which spaceflights were launched from baikonur?",
      "en_key": "spaceflight, launched, baikonur",
      "de_ques": "welche raumfl\u00fcge sind von baikonur gestartet?",
      "de_key": "raumfl\u00fcge, start, baikonur",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
      "entities": [
         "Baikonur_Cosmodrome"
      ],
      "relations": [
         "launchPad"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbp:launchPad res:Baikonur_Cosmodrome }"
   },
   {
      "id": "24",
      "en_ques": "give me a list of all trumpet players that were bandleaders.",
      "en_key": "trumpet player, bandleader",
      "de_ques": "gib mit eine liste aller trompeter, die bandleader waren.",
      "de_key": "trompeter, bandleader",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
      "entities": [
         "Bandleader",
         "Trumpet"
      ],
      "relations": [
         "occupation",
         "instrument"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }"
   },
   {
      "id": "25",
      "en_ques": "which u.s. states are in the same timezone as utah?",
      "en_key": "u.s. state, same, timezone, utah",
      "de_ques": "welche us-bundesstaaten liegen in derselben zeitzone wie utah?",
      "de_key": "us-bundesstaat, dieselbe, zeitzone, utah",
      "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
      "entities": [
         "Utah",
         "Utah"
      ],
      "relations": [
         "timezone",
         "timezone",
         "WikicatStatesOfTheUnitedStates"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }"
   },
   {
      "id": "26",
      "en_ques": "which u.s. states possess gold minerals?",
      "en_key": "u.s. state, mineral, gold",
      "de_ques": "in welchen us-staaten gibt es goldvorkommen?",
      "de_key": "us-staat, goldvorkommen",
      "sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, 'gold', 'i') }",
      "entities": [],
      "relations": [
         "mineral",
         "WikicatStatesOfTheUnitedStates"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, 'gold', 'i') }"
   },
   {
      "id": "27",
      "en_ques": "who is the daughter of ingrid bergman married to?",
      "en_key": "ingrid bergman, daughter, married",
      "de_ques": "mit wem ist die tochter von ingrid bergman verheiratet?",
      "de_key": "ingrid bergman, tochter, verheiratet",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
      "entities": [
         "Ingrid_Bergman"
      ],
      "relations": [
         "spouse",
         "child"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child dbp:spouse ?uri }"
   },
   {
      "id": "28",
      "en_ques": "how deep is lake placid?",
      "en_key": "lake placid, depth",
      "de_ques": "wie tief ist lake placid?",
      "de_key": "lake placid, tiefe",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
      "entities": [
         "Lake_Placid_(Texas)"
      ],
      "relations": [
         "maximumDepth"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { dbr:Lake_Placid_(Texas) dbo:maximumDepth ?n }"
   },
   {
      "id": "29",
      "en_ques": "show me all museums in london.",
      "en_key": "museums, london",
      "de_ques": "zeig mir alle museen in london.",
      "de_key": "london, museen",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
      "entities": [
         "London"
      ],
      "relations": [
         "Museum",
         "location"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Museum ; dbo:location dbr:London }"
   },
   {
      "id": "30",
      "en_ques": "which caves have more than 3 entrances?",
      "en_key": "cave, entrance, more than 3",
      "de_ques": "welche h\u00f6hlen haben mehr als 3 eing\u00e4nge?",
      "de_key": "h\u00f6hle, eingang, mehr als 3",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
      "entities": [],
      "relations": [
         "Cave",
         "entranceCount"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Cave ; dbp:entranceCount ?entrance FILTER ( ?entrance  3 ) }"
   },
   {
      "id": "31",
      "en_ques": "who is the tallest player of the atlanta falcons?",
      "en_key": "atlanta falcons, player, tallest",
      "de_ques": "wer ist der gr\u00f6\u00dfte spieler der atlanta falcons?",
      "de_key": "atlanta falcons, spieler, gr\u00f6\u00dfter",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
      "entities": [
         "Atlanta_Falcons"
      ],
      "relations": [
         "team",
         "height"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:team dbr:Atlanta_Falcons ; dbo:height ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1"
   },
   {
      "id": "32",
      "en_ques": "what are the top-10 action role-playing video games according to ign?",
      "en_key": "top-10, action, role-playing games, ign",
      "de_ques": "was sind laut ign die top-10-action-rollenspiele?",
      "de_key": "top-10-action-rollenspiele, ign",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
      "entities": [
         "CategoryAction_role-playing_video_games"
      ],
      "relations": [
         "ign"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject dbr:Category:Action_role-playing_video_games ; dbp:ign ?score } ORDER BY DESC(?score) LIMIT 10"
   },
   {
      "id": "33",
      "en_ques": "give me all writers that won the nobel prize in literature.",
      "en_key": "writer, win, nobel prize in literature",
      "de_ques": "gib mir alle schriftsteller, die den literaturnobelpreis gewonnen haben.",
      "de_key": "schritfsteller, literaturnobelpreis",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
      "entities": [
         "Nobel_Prize_in_Literature"
      ],
      "relations": [
         "Writer",
         "award"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Writer ; dbo:award dbr:Nobel_Prize_in_Literature }"
   },
   {
      "id": "34",
      "en_ques": "show me all basketball players that are higher than 2 meters.",
      "en_key": "basketball players, higher than 2 meters",
      "de_ques": "zeig mir alle basketballspieler, die gr\u00f6\u00dfer als 2 meter sind.",
      "de_key": "basketballspieler, gr\u00f6\u00dfer als 2 meter",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
      "entities": [],
      "relations": [
         "BasketballPlayer",
         "height"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:BasketballPlayer ; dbo:height ?n FILTER ( ?n  2.0 ) }"
   },
   {
      "id": "35",
      "en_ques": "when was the statue of liberty built?",
      "en_key": "statue of liberty, built",
      "de_ques": "wann wurde die freiheitsstatue erbaut?",
      "de_key": "freiheitsstatue, erbauen",
      "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
      "entities": [
         "Statue_of_Liberty"
      ],
      "relations": [
         "beginningDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { dbr:Statue_of_Liberty dbp:beginningDate ?date }"
   },
   {
      "id": "36",
      "en_ques": "which states border illinois?",
      "en_key": "state, border, illinois",
      "de_ques": "welche staaten grenzen an illinois?",
      "de_key": "staat, angrenzen, illinois",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
      "entities": [
         "Illinois"
      ],
      "relations": [
         "borderingstates"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Illinois dbp:borderingstates ?uri }"
   },
   {
      "id": "37",
      "en_ques": "who developed minecraft?",
      "en_key": "minecraft, develop",
      "de_ques": "wer hat minecraft entwickelt?",
      "de_key": "minecraft, entwickler",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
      "entities": [
         "Minecraft"
      ],
      "relations": [
         "developer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Minecraft dbo:developer ?uri }"
   },
   {
      "id": "38",
      "en_ques": "where did hillel slovak die?",
      "en_key": "hillel slovak, death place",
      "de_ques": "wo ist hillel slovak gestorben?",
      "de_key": "hillel slovak, todesort",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
      "entities": [
         "Hillel_Slovak"
      ],
      "relations": [
         "deathPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Hillel_Slovak dbo:deathPlace ?uri }"
   },
   {
      "id": "39",
      "en_ques": "what movies does jesse eisenberg play in?",
      "en_key": "movies, jesse eisenberg",
      "de_ques": "in welchen filmen spielt jesse eisenberg mit?",
      "de_key": "jesse eisenberg, spielen, filme",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
      "entities": [
         "Jesse_Eisenberg"
      ],
      "relations": [
         "Film",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film ; dbo:starring dbr:Jesse_Eisenberg }"
   },
   {
      "id": "40",
      "en_ques": "give all swimmers that were born in moscow.",
      "en_key": "swimmer, born, moscow",
      "de_ques": "zeig mir alle schwimmer, die in moskau geboren wurden.",
      "de_key": "schwimmer, geboren in, moskau",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
      "entities": [
         "Moscow"
      ],
      "relations": [
         "Swimmer",
         "birthPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Swimmer ; dbo:birthPlace dbr:Moscow }"
   },
   {
      "id": "41",
      "en_ques": "give me all cosmonauts.",
      "en_key": "cosmonauts",
      "de_ques": "gib mir alle kosmonauten.",
      "de_key": "kosmonauten",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
      "entities": [
         "Russia",
         "Soviet_Union"
      ],
      "relations": [
         "Astronaut",
         "nationality",
         "nationality"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Astronaut { ?uri dbo:nationality dbr:Russia } UNION { ?uri dbo:nationality dbr:Soviet_Union } }"
   },
   {
      "id": "42",
      "en_ques": "give me all swiss non-profit organizations.",
      "en_key": "swiss, non-profit organization",
      "de_ques": "nenne mir alle schweizer nonprofit-organisationen?",
      "de_key": "schweizer, nonprofit-organisationen",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
      "entities": [
         "Nonprofit_organization",
         "Switzerland",
         "Switzerland"
      ],
      "relations": [
         "type",
         "location",
         "location",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:type dbr:Nonprofit_organization { ?uri dbo:location dbr:Switzerland } UNION { ?uri dbo:location ?x . ?x dbo:country dbr:Switzerland } }"
   },
   {
      "id": "43",
      "en_ques": "which presidents were born in 1945?",
      "en_key": "president, born, 1945",
      "de_ques": "welche pr\u00e4sidenten wurden 1945 geboren?",
      "de_key": "pr\u00e4sident, geboren, 1945",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, '^1945') }",
      "entities": [],
      "relations": [
         "President",
         "birthDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:President ; dbo:birthDate ?date FILTER regex(?date, '^1945') }"
   },
   {
      "id": "44",
      "en_ques": "what kind of music did lou reed play?",
      "en_key": "kind of music, lou reed, play",
      "de_ques": "was f\u00fcr musik hat lou reed gemacht?",
      "de_key": "lou reed, genre",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
      "entities": [
         "Lou_Reed"
      ],
      "relations": [
         "genre"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Lou_Reed dbo:genre ?uri }"
   },
   {
      "id": "45",
      "en_ques": "where do the red sox play?",
      "en_key": "where, red sox, play",
      "de_ques": "wo spielen die red sox?",
      "de_key": "red sox, spielen",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boston_Red_Sox> <http://dbpedia.org/property/ballpark> ?uri }",
      "entities": [
         "Boston_Red_Sox"
      ],
      "relations": [
         "ballpark"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Boston_Red_Sox dbp:ballpark ?uri }"
   },
   {
      "id": "46",
      "en_ques": "show a list of soccer clubs that play in the bundesliga.",
      "en_key": "soccer clubs, play, bundesliga",
      "de_ques": "zeig mir eine liste der fu\u00dfballvereine, die in der bundesliga spielen.",
      "de_key": "fu\u00dfballvereine, spielen, bundesliga",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
      "entities": [
         "Bundesliga"
      ],
      "relations": [
         "SoccerClub",
         "league"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:SoccerClub ; dbo:league dbr:Bundesliga }"
   },
   {
      "id": "47",
      "en_ques": "which volcanos in japan erupted since 2000?",
      "en_key": "volcanos, japan, erupted, since 2000",
      "de_ques": "welche japanischen vulkane sind seit 2000 ausgebrochen?",
      "de_key": "vulkan, japan, ausgebrochen, seit 2000",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }",
      "entities": [
         "Japan"
      ],
      "relations": [
         "Volcano",
         "locatedInArea",
         "eruptionYear"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Volcano ; dbo:locatedInArea dbr:Japan ; dbo:eruptionYear ?date FILTER ( year(?date) = 2000 ) }"
   },
   {
      "id": "48",
      "en_ques": "which bridges cross the seine?",
      "en_key": "bridges, cross, seine",
      "de_ques": "welche br\u00fccken \u00fcberqueren die seine?",
      "de_key": "br\u00fccken, \u00fcberqueren, seine",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
      "entities": [
         "Seine"
      ],
      "relations": [
         "Bridge",
         "crosses"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Bridge ; dbo:crosses dbr:Seine }"
   },
   {
      "id": "49",
      "en_ques": "what is the official color of the university of oxford?",
      "en_key": "university of oxford, official color",
      "de_ques": "was ist die offizielle farbe der universit\u00e4t oxford?",
      "de_key": "universit\u00e4t oxford, offizielle farbe",
      "sparql": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string }",
      "entities": [
         "University_of_Oxford"
      ],
      "relations": [
         "officialSchoolColour"
      ],
      "fil_sparql": "SELECT DISTINCT ?string WHERE { dbr:University_of_Oxford dbo:officialSchoolColour ?string }"
   },
   {
      "id": "50",
      "en_ques": "how many films did hal roach produce?",
      "en_key": "hal roach, produce, film",
      "de_ques": "wieviele filme hat hal roach produziert?",
      "de_key": "hal roach, produzieren, film",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
      "entities": [
         "Hal_Roach"
      ],
      "relations": [
         "producer"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dbo:producer dbr:Hal_Roach }"
   },
   {
      "id": "51",
      "en_ques": "give me all danish movies.",
      "en_key": "movie, denmark",
      "de_ques": "gib mir alle d\u00e4nischen filme.",
      "de_key": "film, d\u00e4nemark",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
      "entities": [
         "Denmark"
      ],
      "relations": [
         "Film",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film ; dbo:country dbr:Denmark }"
   },
   {
      "id": "52",
      "en_ques": "what is the most frequent cause of death?",
      "en_key": "cause of death, most frequent",
      "de_ques": "was ist die h\u00e4ufigste todesursache?",
      "de_key": "todesursache, h\u00e4ufigste",
      "sparql": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "deathCause"
      ],
      "fil_sparql": "SELECT DISTINCT ?x WHERE { ?uri dbo:deathCause ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1"
   },
   {
      "id": "53",
      "en_ques": "who are the four youngest mvp basketball players?",
      "en_key": "four, youngest, mvp, basketball player",
      "de_ques": "wer sind die vier j\u00fcngsten mvp baskettballspieler?",
      "de_key": "vier j\u00fcngsten, mvp, basketballspieler",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, 'MVP') } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
      "entities": [],
      "relations": [
         "BasketballPlayer",
         "birthDate",
         "highlights"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:BasketballPlayer ; dbo:birthDate ?date ; dbp:highlights ?h FILTER regex(?h, 'MVP') } ORDER BY DESC(?date) OFFSET 0 LIMIT 4"
   },
   {
      "id": "54",
      "en_ques": "give me all companies in munich.",
      "en_key": "company, munich",
      "de_ques": "gib mir alle unternehmen in m\u00fcnchen.",
      "de_key": "unternehmen, m\u00fcnchen",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }",
      "entities": [
         "Munich",
         "Munich",
         "Munich"
      ],
      "relations": [
         "Company",
         "location",
         "headquarter",
         "locationCity"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Company { ?uri dbo:location dbr:Munich } UNION { ?uri dbo:headquarter dbr:Munich } UNION { ?uri dbo:locationCity dbr:Munich } }"
   },
   {
      "id": "55",
      "en_ques": "give me the capitals of all countries that the himalayas run through.",
      "en_key": "countries himalayas run through, capitals",
      "de_ques": "gib mir die haupst\u00e4dte aller l\u00e4nder, \u00fcber die sich der himalaya erstreckt.",
      "de_key": "l\u00e4nder, erstrecken, himalaya, haupstadt",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
      "entities": [
         "Himalayas"
      ],
      "relations": [
         "country",
         "capital"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Himalayas dbo:country ?country . ?country dbo:capital ?uri }"
   },
   {
      "id": "56",
      "en_ques": "how many movies did park chan-wook direct?",
      "en_key": "how many movies, directed, park chan-wook",
      "de_ques": "bei wievielen filmen hat park chan-wook regie gef\u00fchrt?",
      "de_key": "wieviele, filme, regie, park chan-wook",
      "sparql": "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . }",
      "entities": [
         "Park_Chan-wook"
      ],
      "relations": [
         "director"
      ],
      "fil_sparql": "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri dbo:director dbr:Park_Chan-wook . }"
   },
   {
      "id": "57",
      "en_ques": "which rivers flow into a german lake?",
      "en_key": "rivers, flow, german lake",
      "de_ques": "welche fl\u00fcsse flie\u00dfen in deutsche seen?",
      "de_key": "fluss, flie\u00dfen, deutsch, see",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }",
      "entities": [
         "Germany"
      ],
      "relations": [
         "River",
         "inflow",
         "Lake",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:River . ?x dbo:inflow ?uri ; a dbo:Lake ; dbo:country dbr:Germany }"
   },
   {
      "id": "58",
      "en_ques": "how many airlines are there?",
      "en_key": "how many, airlines",
      "de_ques": "wieviele fluggesellschaften gibt es?",
      "de_key": "wieviele, fluggesellschaften",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> }",
      "entities": [],
      "relations": [
         "Airline"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:Airline }"
   },
   {
      "id": "59",
      "en_ques": "give me all islands that belong to japan.",
      "en_key": "islands, japan",
      "de_ques": "gib mir alle inseln, die zu japan geh\u00f6ren.",
      "de_key": "inseln, japan",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
      "entities": [
         "Japan"
      ],
      "relations": [
         "Island",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Island ; dbo:country dbr:Japan }"
   },
   {
      "id": "60",
      "en_ques": "how many inhabitants does maribor have?",
      "en_key": "maribor, inhabitants",
      "de_ques": "wieviele einwohner hat maribor?",
      "de_key": "maribor, einwohner",
      "sparql": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Maribor> <http://dbpedia.org/ontology/populationTotal> ?num }",
      "entities": [
         "Maribor"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { dbr:Maribor dbo:populationTotal ?num }"
   },
   {
      "id": "61",
      "en_ques": "give me all apollo 14 astronauts.",
      "en_key": "astronaut, apollo 14",
      "de_ques": "gib mir alle apollo-14-astronauten.",
      "de_key": "astronaut, apollo 14",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> }",
      "entities": [
         "Apollo_14"
      ],
      "relations": [
         "mission"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:mission dbr:Apollo_14 }"
   },
   {
      "id": "62",
      "en_ques": "which companies have more than 1 million employees?",
      "en_key": "company, more than 1 million, employees",
      "de_ques": "welche unternehmen haben mehr als 1 millionen angestellte?",
      "de_key": "unternehmen, mehr als 1 millionen, angestellte",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) }",
      "entities": [],
      "relations": [
         "Company",
         "numberOfEmployees",
         "numEmployees"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Company { ?uri dbo:numberOfEmployees ?n } UNION { ?uri dbp:numEmployees ?n } FILTER ( ?n  1000000 ) }"
   },
   {
      "id": "63",
      "en_ques": "in which films directed by garry marshall was julia roberts starring?",
      "en_key": "film, directed, garry marshall, starring, julia roberts",
      "de_ques": "in welchem filmen, bei denen garry marshall regie gef\u00fchrt hat, hat julia roberts mitgespielt?",
      "de_key": "film, regie, garry marshall, mitspielen, julia roberts",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
      "entities": [
         "Julia_Roberts",
         "Garry_Marshall"
      ],
      "relations": [
         "Film",
         "starring",
         "director"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film ; dbo:starring dbr:Julia_Roberts ; dbo:director dbr:Garry_Marshall }"
   },
   {
      "id": "64",
      "en_ques": "give me all soccer clubs in the premier league.",
      "en_key": "premier league, soccer club",
      "de_ques": "gib mir alle vereine in der premier league.",
      "de_key": "premier league, verein",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
      "entities": [
         "Premier_League"
      ],
      "relations": [
         "SoccerClub",
         "league"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:SoccerClub ; dbo:league dbr:Premier_League }"
   },
   {
      "id": "65",
      "en_ques": "what is the highest place of the urals?",
      "en_key": "urals, highest place",
      "de_ques": "was ist die h\u00f6hchste stelle des ural?",
      "de_key": "ural, h\u00f6chste stelle",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri }",
      "entities": [
         "Ural_Mountains"
      ],
      "relations": [
         "highest"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Ural_Mountains dbp:highest ?uri }"
   },
   {
      "id": "66",
      "en_ques": "who is the governor of wyoming?",
      "en_key": "governor, wyoming",
      "de_ques": "wer ist der gouverneur von wyoming?",
      "de_key": "gouverneur, wyoming",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri }",
      "entities": [
         "Wyoming"
      ],
      "relations": [
         "governor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Wyoming dbp:governor ?uri }"
   },
   {
      "id": "67",
      "en_ques": "where did the architect of the eiffel tower study?",
      "en_key": "architect, eiffel tower, study",
      "de_ques": "wo hat der architekt des eiffelturms studiert?",
      "de_key": "architeckt, eiffelturm, studiert",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri }",
      "entities": [
         "Eiffel_Tower"
      ],
      "relations": [
         "architect",
         "almaMater"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Eiffel_Tower dbo:architect ?x . ?x dbp:almaMater ?uri }"
   },
   {
      "id": "68",
      "en_ques": "give me all world heritage sites designated within the past two years.",
      "en_key": "world heritage site, designate, past two years",
      "de_ques": "gib mir alle welterbest\u00e4tten, die in den vergangenen zwei jahren aufgenommen wurden.",
      "de_key": "welterbest\u00e4tte, aufnehmen, vergangene zwei jahre",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }",
      "entities": [],
      "relations": [
         "WorldHeritageSite",
         "year",
         "year"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:WorldHeritageSite . { ?uri dbp:year '2013'^^xsd:integer . } UNION { ?uri dbp:year '2014'^^xsd:integer . } }"
   },
   {
      "id": "69",
      "en_ques": "give me all actors who were born in paris after 1950.",
      "en_key": "actors, born, paris, after 1950",
      "de_ques": "gib mir alle schauspieler, die nach 1950 in paris geboren wurden.",
      "de_key": "schauspieler, geboren, nach 1950, in paris",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) }",
      "entities": [
         "Paris"
      ],
      "relations": [
         "Actor",
         "birthPlace",
         "birthDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Actor . ?uri dbo:birthPlace dbr:Paris . ?uri dbo:birthDate ?date . FILTER ( ?date = xsd:dateTime('1950-12-31T00:00:00Z')) }"
   },
   {
      "id": "70",
      "en_ques": "which movies star both liz taylor and richard burton?",
      "en_key": "movies, star, liz taylor, richard burton?",
      "de_ques": "in welchen filmen spielen sowohl liz taylor als auch richard burton mit?",
      "de_key": "film, spielen, liz taylor, richard burton",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
      "entities": [
         "Elizabeth_Taylor",
         "Richard_Burton"
      ],
      "relations": [
         "starring",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:starring dbr:Elizabeth_Taylor ; dbo:starring dbr:Richard_Burton }"
   },
   {
      "id": "71",
      "en_ques": "give me all australian nonprofit organizations.",
      "en_key": "nonprofit organization, australia",
      "de_ques": "gib mir alle gemeinn\u00fctzigen organisationen in australien.",
      "de_key": "gemeinn\u00fctzige organisation, australien",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
      "entities": [
         "Nonprofit_organization",
         "Australia",
         "Australia"
      ],
      "relations": [
         "type",
         "locationCountry",
         "location",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:type dbr:Nonprofit_organization { ?uri dbo:locationCountry dbr:Australia } UNION { ?uri dbo:location ?x . ?x dbo:country dbr:Australia } }"
   },
   {
      "id": "72",
      "en_ques": "which pope succeeded john paul ii?",
      "en_key": "pope, succeed, john paul ii",
      "de_ques": "welcher papst folgte auf johannes paul ii?",
      "de_key": "papst, folgt auf, johannes paul ii",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri }",
      "entities": [
         "Pope_John_Paul_II"
      ],
      "relations": [
         "successor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Pope_John_Paul_II dbp:successor ?uri }"
   },
   {
      "id": "73",
      "en_ques": "give me all esa astronauts.",
      "en_key": "esa astronauts",
      "de_ques": "gib mir alle esa-astronauten.",
      "de_key": "esa-astronauten",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> }",
      "entities": [
         "European_Space_Agency"
      ],
      "relations": [
         "Astronaut",
         "type"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Astronaut ; dbp:type dbr:European_Space_Agency }"
   },
   {
      "id": "74",
      "en_ques": "who was president of pakistan in 1978?",
      "en_key": "president, pakistan, 1978",
      "de_ques": "wer war 1978 pr\u00e4sident von pakistan?",
      "de_key": "pr\u00e4sident, pakistan, 1978",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }",
      "entities": [
         "President_of_Pakistan"
      ],
      "relations": [
         "title",
         "years"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbp:title dbr:President_of_Pakistan ; dbp:years 1978 }"
   },
   {
      "id": "75",
      "en_ques": "who is the owner of rolls-royce?",
      "en_key": "rolls-royce, owner",
      "de_ques": "wem geh\u00f6rt rolls-royce?",
      "de_key": "rolls-royce, geh\u00f6ren",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri }",
      "entities": [
         "Rolls-Royce_Motors"
      ],
      "relations": [
         "owner"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Rolls-Royce_Motors dbo:owner ?uri }"
   },
   {
      "id": "76",
      "en_ques": "how many museums does paris have?",
      "en_key": "how many, museum, paris",
      "de_ques": "wieviele museen hat paris?",
      "de_key": "wieviele, museen, paris",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
      "entities": [
         "Paris"
      ],
      "relations": [
         "Museum",
         "location"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Museum ; dbo:location dbr:Paris }"
   },
   {
      "id": "77",
      "en_ques": "where was jfk assassinated?",
      "en_key": "jfk, assassinated",
      "de_ques": "wo wurde jfk ermordet?",
      "de_key": "jfk, ermordet",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
      "entities": [
         "John_F._Kennedy"
      ],
      "relations": [
         "deathPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:John_F._Kennedy dbo:deathPlace ?uri }"
   },
   {
      "id": "78",
      "en_ques": "give me all federal chancellors of germany.",
      "en_key": "germany, federal chancellors",
      "de_ques": "gib mir alle bundeskanzler.",
      "de_key": "bundeskanzler",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> 'Chancellor of Germany' } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }",
      "entities": [
         "Chancellor_of_Germany"
      ],
      "relations": [
         "Person",
         "office",
         "office"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Person { ?uri dbo:office 'Chancellor of Germany' } UNION { ?uri dbp:office dbr:Chancellor_of_Germany } }"
   },
   {
      "id": "79",
      "en_ques": "show me everyone who was born on halloween.",
      "en_key": "person, born on, halloween",
      "de_ques": "nenne mir alle personen, die an halloween geboren sind. ",
      "de_key": "personen, geboren, halloween",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }",
      "entities": [
         "Halloween"
      ],
      "relations": [
         "Person",
         "birthDate",
         "birthDate",
         "date"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Person { ?uri dbo:birthDate ?date } UNION { ?uri dbp:birthDate ?date } dbr:Halloween dbp:date ?date }"
   },
   {
      "id": "80",
      "en_ques": "which beer originated in ireland?",
      "en_key": "beer, originated, ireland",
      "de_ques": "welches bier kommt aus irland?",
      "de_key": "bier, kommen aus, irland",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }",
      "entities": [
         "Beer",
         "Beer_in_Ireland"
      ],
      "relations": [
         "origin",
         "type"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbp:type dbr:Beer ; dbo:origin dbr:Beer_in_Ireland }"
   },
   {
      "id": "81",
      "en_ques": "to which countries does the himalayan mountain system extend?",
      "en_key": "himalayan mountain system, extend, country",
      "de_ques": "\u00fcber welche l\u00e4nder erstreckt sich der himalaya?",
      "de_key": "himalaya, erstrecken, land",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
      "entities": [
         "Himalayas"
      ],
      "relations": [
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Himalayas dbo:country ?uri }"
   },
   {
      "id": "82",
      "en_ques": "which actors were born in germany?",
      "en_key": "actor, born, germany",
      "de_ques": "welche schauspieler wurden in deutschland geboren?",
      "de_key": "schauspieler, geboren, deutschland",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
      "entities": [
         "Germany",
         "Germany"
      ],
      "relations": [
         "Actor",
         "birthPlace",
         "birthPlace",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Actor { ?uri dbo:birthPlace dbr:Germany } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country dbr:Germany } }"
   },
   {
      "id": "83",
      "en_ques": "how much carbs does peanut butter have?",
      "en_key": "how much, carbs, peanut butter",
      "de_ques": "wieviele kohlenhydrate hat erdnussbutter?",
      "de_key": "wieviele, kohlenhydrate, erdnussbutter",
      "sparql": "SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs }",
      "entities": [
         "Peanut_butter"
      ],
      "relations": [
         "carbs"
      ],
      "fil_sparql": "SELECT DISTINCT ?carbs WHERE { dbr:Peanut_butter dbp:carbs ?carbs }"
   },
   {
      "id": "84",
      "en_ques": "who produced the most films?",
      "en_key": "film, produced, most",
      "de_ques": "wer hat die meisten filme produziert?",
      "de_key": "film, produzieren, die meisten",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "Film",
         "producer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Film . ?film dbo:producer ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1"
   },
   {
      "id": "85",
      "en_ques": "how many employees does google have?",
      "en_key": "google, employees",
      "de_ques": "wieviele angestellte hat google?",
      "de_key": "google, angestellte",
      "sparql": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num }",
      "entities": [
         "Google"
      ],
      "relations": [
         "numberOfEmployees"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { dbr:Google dbo:numberOfEmployees ?num }"
   },
   {
      "id": "86",
      "en_ques": "give me all actors who were born in berlin.",
      "en_key": "actors, born, berlin",
      "de_ques": "gib mir alle in berlin geborenenen schauspieler.",
      "de_key": "schauspieler, geboren, berlin",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
      "entities": [
         "Berlin"
      ],
      "relations": [
         "Actor",
         "birthPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Actor ; dbo:birthPlace dbr:Berlin }"
   },
   {
      "id": "87",
      "en_ques": "who created goofy?",
      "en_key": "created, goofy",
      "de_ques": "wer hat goofy erfunden?",
      "de_key": "erfinden, goofy",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
      "entities": [
         "Goofy"
      ],
      "relations": [
         "creator"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Goofy dbo:creator ?uri }"
   },
   {
      "id": "88",
      "en_ques": "which music albums contain the song last christmas?",
      "en_key": "music album, song, last christmas",
      "de_ques": "auf welchen musikalben ist das lied last christmas?",
      "de_key": "musikalbum, lied, last christmas",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> 'Last Christmas'@en }",
      "entities": [],
      "relations": [
         "album"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?single dbo:album ?uri ; w3o:label 'Last Christmas'@en }"
   },
   {
      "id": "89",
      "en_ques": "when was alberta admitted as province?",
      "en_key": "alberta, admit, province",
      "de_ques": "wann wurde die provinz alberta gegr\u00fcndet?",
      "de_key": "provinz, alberta, gegr\u00fcndet",
      "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Alberta> <http://dbpedia.org/property/admittancedate> ?date }",
      "entities": [
         "Alberta"
      ],
      "relations": [
         "admittancedate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { dbr:Alberta dbp:admittancedate ?date }"
   },
   {
      "id": "90",
      "en_ques": "how many missions does the soyuz programme have?",
      "en_key": "how many, mission, soyuz programme",
      "de_ques": "wieviele missionen umfasst das soyuz-programm?",
      "de_key": "wieviele, mission, soyuz-programm",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/property/programme> <http://dbpedia.org/resource/Soyuz_programme> }",
      "entities": [
         "Soyuz_programme"
      ],
      "relations": [
         "programme"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dbp:programme dbr:Soyuz_programme }"
   },
   {
      "id": "91",
      "en_ques": "give me all the tv shows with neil patrick harris.",
      "en_key": "tv shows, neil patrick harris",
      "de_ques": "gib mir alle fernsehserien mit neil patrick harris.",
      "de_key": "fernsehserien, neil patrick harris",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
      "entities": [
         "Neil_Patrick_Harris"
      ],
      "relations": [
         "TelevisionShow",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:TelevisionShow ; dbo:starring dbr:Neil_Patrick_Harris }"
   },
   {
      "id": "92",
      "en_ques": "when were the hells angels founded?",
      "en_key": "hells angels, founded",
      "de_ques": "wann wurden die hells angels gegr\u00fcndet?",
      "de_key": "hells angels, gr\u00fcnden",
      "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date }",
      "entities": [
         "Hells_Angels"
      ],
      "relations": [
         "founded"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { dbr:Hells_Angels dbp:founded ?date }"
   },
   {
      "id": "93",
      "en_ques": "what is the net income of apple?",
      "en_key": "net income, apple",
      "de_ques": "was ist der nettogewinn von apple?",
      "de_key": "nettogewinn, apple",
      "sparql": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
      "entities": [
         "Apple_Inc."
      ],
      "relations": [
         "netIncome"
      ],
      "fil_sparql": "SELECT DISTINCT ?ni WHERE { dbr:Apple_Inc. dbo:netIncome ?ni }"
   },
   {
      "id": "94",
      "en_ques": "give me all swedish holidays.",
      "en_key": "swedish holidays",
      "de_ques": "gib mir alle schwedischen feiertage.",
      "de_key": "schwedische feiertage",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
      "entities": [
         "Sweden"
      ],
      "relations": [
         "Holiday",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Holiday ; dbo:country dbr:Sweden }"
   },
   {
      "id": "95",
      "en_ques": "in which city was the former dutch queen juliana buried?",
      "en_key": "dutch queen juliana, burried, city",
      "de_ques": "in welcher stadt wurde die ehemalige niederl\u00e4ndische k\u00f6nigin juliana beerdigt?",
      "de_key": "niederl\u00e4ndische k\u00f6nigin juliana, beerdigen, stadt",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juliana_of_the_Netherlands> <http://dbpedia.org/property/burialPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Settlement> }",
      "entities": [
         "Juliana_of_the_Netherlands"
      ],
      "relations": [
         "Settlement",
         "burialPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Juliana_of_the_Netherlands dbp:burialPlace ?uri . ?uri a dbo:Settlement }"
   },
   {
      "id": "96",
      "en_ques": "list all the musicals with music by leonard bernstein.",
      "en_key": "musicals, music by, leonard bernstein",
      "de_ques": "liste alle musicals mit musik von leonard bernstein auf.",
      "de_key": "musicals, musik von, leonard bernstein",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
      "entities": [
         "Leonard_Bernstein"
      ],
      "relations": [
         "Musical",
         "musicBy"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Musical ; dbo:musicBy dbr:Leonard_Bernstein }"
   },
   {
      "id": "97",
      "en_ques": "give me all companies in the advertising industry.",
      "en_key": "company, advertising industry",
      "de_ques": "gib mir alle unternehmen, die in der werbebranche t\u00e4tig sind.",
      "de_key": "unternehmen, werbebranche",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, 'advertising', 'i') } }",
      "entities": [
         "Advertising"
      ],
      "relations": [
         "Company",
         "industry",
         "industry"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:Company { ?uri dbo:industry dbr:Advertising } UNION { ?uri dbo:industry ?industry FILTER regex(?industry, 'advertising', 'i') } }"
   },
   {
      "id": "98",
      "en_ques": "what is the largest metropolitan area in washington state?",
      "en_key": "largest metropolitan area, washington state",
      "de_ques": "was ist das gr\u00f6\u00dfte ballungsgebiet im staat washington?",
      "de_key": "gr\u00f6\u00dftes ballungsgebiet, staat washington",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri }",
      "entities": [
         "Washington_(state)"
      ],
      "relations": [
         "largestmetro"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Washington_(state) dbp:largestmetro ?uri }"
   },
   {
      "id": "99",
      "en_ques": "who killed john lennon?",
      "en_key": "killed, john lennon",
      "de_ques": "wer hat john lennon get\u00f6tet?",
      "de_key": "get\u00f6tet, john lennon",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> }",
      "entities": [
         "Death_of_John_Lennon"
      ],
      "relations": [
         "Person",
         "conviction"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Person ; dbp:conviction dbr:Death_of_John_Lennon }"
   },
   {
      "id": "100",
      "en_ques": "which writers studied in istanbul?",
      "en_key": "writers, studied, istanbul",
      "de_ques": "welche schriftsteller haben in istanbul studiert?",
      "de_key": "schriftsteller, studiert, istanbul",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }",
      "entities": [
         "Istanbul",
         "Istanbul"
      ],
      "relations": [
         "Writer",
         "almaMater",
         "education",
         "city",
         "city"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Writer { ?uri dbo:almaMater ?x } UNION { ?uri dbo:education ?x } { ?x dbo:city dbr:Istanbul } UNION { ?x dbp:city dbr:Istanbul } }"
   },
   {
      "id": "101",
      "en_ques": "give me all australian metalcore bands.",
      "en_key": "australian, metalcore bands",
      "de_ques": "gib mir alle australischen metalcore-bands.",
      "de_key": "australisch, metalcore-bands",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
      "entities": [
         "Metalcore",
         "Australia",
         "Australia"
      ],
      "relations": [
         "Band",
         "genre",
         "hometown",
         "hometown",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Band ; dbo:genre dbr:Metalcore { ?uri dbo:hometown dbr:Australia } UNION { ?uri dbo:hometown ?h . ?h dbo:country dbr:Australia } }"
   },
   {
      "id": "102",
      "en_ques": "which countries adopted the euro?",
      "en_key": "country, adopt, euro",
      "de_ques": "welche l\u00e4nder haben den euro \u00fcbernommen?",
      "de_key": "land, \u00fcbernehmen, euro",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> 'EUR'@en } }",
      "entities": [
         "Euro"
      ],
      "relations": [
         "Country",
         "currency",
         "currencyCode"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Country { ?uri dbo:currency dbr:Euro } UNION { ?uri dbp:currencyCode 'EUR'@en } }"
   },
   {
      "id": "103",
      "en_ques": "give me all types of eating disorders.",
      "en_key": "types, eating disorders",
      "de_ques": "zeig mir alle arten von essst\u00f6rungen.",
      "de_key": "arten von, esst\u00f6rungen",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatEatingDisorders> }",
      "entities": [],
      "relations": [
         "WikicatEatingDisorders"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a yago:WikicatEatingDisorders }"
   },
   {
      "id": "104",
      "en_ques": "was marc chagall a jew?",
      "en_key": "marc chagall, jew",
      "de_ques": "war marc chagall ein jude?",
      "de_key": "marc chagall, jude",
      "sparql": "ASK WHERE { <http://dbpedia.org/resource/Marc_Chagall> <http://dbpedia.org/property/ethnicity> 'Jewish'@en }",
      "entities": [
         "Marc_Chagall"
      ],
      "relations": [
         "ethnicity"
      ],
      "fil_sparql": "ASK WHERE { dbr:Marc_Chagall dbp:ethnicity 'Jewish'@en }"
   },
   {
      "id": "105",
      "en_ques": "what was brazil's lowest rank in the fifa world ranking?",
      "en_key": "brazil, lowest rank, fifa world ranking",
      "de_ques": "was war brasiliens niedrigste platzierung in der fifa-weltrangliste?",
      "de_key": "brasilien, niedrigste platzierung, fifa-weltrangliste",
      "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n }",
      "entities": [
         "Brazil_national_football_team"
      ],
      "relations": [
         "fifaMin"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { dbr:Brazil_national_football_team dbp:fifaMin ?n }"
   },
   {
      "id": "106",
      "en_ques": "how many films did leonardo dicaprio star in?",
      "en_key": "film, star, leonardo dicaprio",
      "de_ques": "in wievielen filmen hat leonardo dicaprio mitgespielt?",
      "de_key": "film, mitspielen, leonardo dicaprio",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
      "entities": [
         "Leonardo_DiCaprio"
      ],
      "relations": [
         "Film",
         "starring"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:Film ; dbo:starring dbr:Leonardo_DiCaprio }"
   },
   {
      "id": "107",
      "en_ques": "was margaret thatcher a chemist?",
      "en_key": "margaret thatcher, chemist",
      "de_ques": "war margaret thatcher chemikerin?",
      "de_key": "margaret thatcher, chemikerin",
      "sparql": "ASK WHERE { <http://dbpedia.org/resource/Margaret_Thatcher> <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Chemist> }",
      "entities": [
         "Margaret_Thatcher",
         "Chemist"
      ],
      "relations": [
         "profession"
      ],
      "fil_sparql": "ASK WHERE { dbr:Margaret_Thatcher dbo:profession dbr:Chemist }"
   },
   {
      "id": "108",
      "en_ques": "which u.s. states are in the same time zone as utah?",
      "en_key": "u.s. state, same, time zone, utah",
      "de_ques": "welche us-bundesstaaten liegen in derselben zeitzone wie utah?",
      "de_key": "us-bundesstaat, dieselbe, zeitzone, utah",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }",
      "entities": [
         "Utah",
         "Utah"
      ],
      "relations": [
         "timezone",
         "timezone",
         "WikicatStatesOfTheUnitedStates"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Utah dbp:timezone ?x . ?uri a yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != dbr:Utah ) }"
   },
   {
      "id": "109",
      "en_ques": "give me all books written by danielle steel.",
      "en_key": "book, written, danielle steel",
      "de_ques": "gib mir alle b\u00fccher, die danielle steel geschrieben hat.",
      "de_key": "buch, schreiben, danielle steel",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> }",
      "entities": [
         "Danielle_Steel"
      ],
      "relations": [
         "Book",
         "author"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Book ; dbo:author dbr:Danielle_Steel }"
   },
   {
      "id": "110",
      "en_ques": "which country has the most official languages?",
      "en_key": "country, official language, most",
      "de_ques": "welches land hat die meisten amtssprachen?",
      "de_key": "land, amtssprache, die meisten",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/property/officialLanguages> ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "Country",
         "officialLanguages"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Country . ?uri dbp:officialLanguages ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1"
   },
   {
      "id": "111",
      "en_ques": "what is the total amount of men and women serving in the fdny?",
      "en_key": "total amount, men, women, serve, fdny",
      "de_ques": "wieviele m\u00e4nner und frauen arbeiten in der new yorker berufsfeuerwehr?",
      "de_key": "m\u00e4nner, frauen, arbeiten, new york, berufsfeuerwehr",
      "sparql": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/New_York_City_Fire_Department> <http://dbpedia.org/property/employees> ?num }",
      "entities": [
         "New_York_City_Fire_Department"
      ],
      "relations": [
         "employees"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { dbr:New_York_City_Fire_Department dbp:employees ?num }"
   },
   {
      "id": "112",
      "en_ques": "which actor played chewbacca?",
      "en_key": "actor, play, chewbacca",
      "de_ques": "welcher schauspieler hat chewbacca gespielt?",
      "de_key": "schauspieler, spielen, chewbacca",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chewbacca> <http://dbpedia.org/ontology/portrayer> ?uri }",
      "entities": [
         "Chewbacca"
      ],
      "relations": [
         "portrayer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Chewbacca dbo:portrayer ?uri }"
   },
   {
      "id": "113",
      "en_ques": "give me all libraries established earlier than 1400.",
      "en_key": "libraries, established, earlier than 1400",
      "de_ques": "gib mir alle bibliotheken, die vor 1400 gegr\u00fcndet worden.",
      "de_key": "bibliotheken, gegr\u00fcndet, vor 1400",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) }",
      "entities": [],
      "relations": [
         "Library",
         "established"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Library ; dbp:established ?year FILTER ( ?year < 1400 ) }"
   },
   {
      "id": "114",
      "en_ques": "which programming languages were influenced by perl?",
      "en_key": "programming languages, influenced by, perl",
      "de_ques": "welche programmiersprachen wurden durch perl beeinflusst?",
      "de_key": "programmiersprachen, beeinflusst durch, perl",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }",
      "entities": [
         "Perl",
         "Perl"
      ],
      "relations": [
         "ProgrammingLanguage",
         "influencedBy",
         "influenced"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:ProgrammingLanguage { ?uri dbo:influencedBy dbr:Perl } UNION { dbr:Perl dbo:influenced ?uri } }"
   },
   {
      "id": "115",
      "en_ques": "in which u.s. state is mount mckinley located?",
      "en_key": "u.s. state, located, mount mckinley",
      "de_ques": "in welchem us-bundesstaat befindet sich der mount mckinley?",
      "de_key": "us-staat, befinden, mount mckinley",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> dbo:wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
      "entities": [
         "Mount_McKinley"
      ],
      "relations": [
         "locatedInArea",
         "wikiPageRedirects",
         "WikicatStatesOfTheUnitedStates"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Mount_McKinley dbo:wikiPageRedirects ?x . ?x dbo:locatedInArea ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }"
   },
   {
      "id": "116",
      "en_ques": "what airlines are part of the skyteam alliance?",
      "en_key": "airlines, part of, skyteam alliance",
      "de_ques": "welche fluggesellschaften sind teil der skyteam-allianz?",
      "de_key": "fluggesellschaften, teil von, skyteam-allianz",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airline> { ?uri <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/SkyTeam> } UNION { ?uri <http://dbpedia.org/ontology/Alliance> <http://dbpedia.org/resource/SkyTeam> } }",
      "entities": [
         "SkyTeam",
         "SkyTeam"
      ],
      "relations": [
         "Airline",
         "alliance",
         "Alliance"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Airline { ?uri dbo:alliance dbr:SkyTeam } UNION { ?uri dbo:Alliance dbr:SkyTeam } }"
   },
   {
      "id": "117",
      "en_ques": "which ships were called after benjamin franklin?",
      "en_key": "ship, called after, benjamin franklin",
      "de_ques": "welche schiffe wurden nach benjamin franklin benannt?",
      "de_key": "schiff, benannt, benjamin franklin",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/shipNamesake> <http://dbpedia.org/resource/Benjamin_Franklin> }",
      "entities": [
         "Benjamin_Franklin"
      ],
      "relations": [
         "shipNamesake"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbp:shipNamesake dbr:Benjamin_Franklin }"
   },
   {
      "id": "118",
      "en_ques": "give me all methodist politicians.",
      "en_key": "politician, methodist",
      "de_ques": "gib mir alle politiker, die methodisten sind.",
      "de_key": "politiker, methodist",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Methodism> }",
      "entities": [
         "Methodism"
      ],
      "relations": [
         "Politician",
         "religion"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Politician ; dbo:religion dbr:Methodism }"
   },
   {
      "id": "119",
      "en_ques": "what other books have been written by the author of the fault in our stars?",
      "en_key": "books, author, the fault in our stars",
      "de_ques": "welche anderen b\u00fccher wurden vom autor von der fehler unserer sterne geschrieben? ",
      "de_key": "b\u00fccher, autor, der fehler in unseren sternen",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?books WHERE { ?books dbo:author <http://dbpedia.org/resource/John_Green_(author)> }",
      "entities": [
         "John_Green_(author)"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT ?books WHERE { ?books dbo:author dbr:John_Green_(author) }"
   },
   {
      "id": "120",
      "en_ques": "what is the highest mountain?",
      "en_key": "mountain, highest",
      "de_ques": "was ist der h\u00f6chste berg?",
      "de_key": "h\u00f6chster, berg",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "Mountain",
         "elevation"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Mountain ; dbo:elevation ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1"
   },
   {
      "id": "121",
      "en_ques": "which poet wrote the most books?",
      "en_key": "poet, most, books",
      "de_ques": "welcher dichter hat die meisten b\u00fccher geschrieben?",
      "de_key": "dichter, b\u00fccher, die meisten",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
      "entities": [
         "Poet"
      ],
      "relations": [
         "occupation",
         "author",
         "Book"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Poet . ?x dbo:author ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Book . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1"
   },
   {
      "id": "122",
      "en_ques": "which programming languages influenced javascript?",
      "en_key": "programming languages, influenced, javascript",
      "de_ques": "welche programmiersprachen haben javascript beeinflusst?",
      "de_key": "programmiersprachen, beeinflusst, javascript",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }",
      "entities": [
         "JavaScript"
      ],
      "relations": [
         "ProgrammingLanguage",
         "influenced"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:ProgrammingLanguage ; dbo:influenced dbr:JavaScript }"
   },
   {
      "id": "123",
      "en_ques": "which musician wrote the most books?",
      "en_key": "musician, wrote, the most books",
      "de_ques": "welcher musiker hat die meisten b\u00fccher geschrieben?",
      "de_key": "musiker, geschrieben, die meisten b\u00fccher",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
      "entities": [
         "Musician"
      ],
      "relations": [
         "occupation",
         "author",
         "Book"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Musician . ?x dbo:author ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Book . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1"
   },
   {
      "id": "124",
      "en_ques": "which films starring clint eastwood did he direct himself?",
      "en_key": "film, starring, direct, clint eastwood",
      "de_ques": "bei welchen filmen mit clint eastwood hat er selber regie gef\u00fchrt?",
      "de_key": "film, clint eastwood, regie",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
      "entities": [
         "Clint_Eastwood",
         "Clint_Eastwood"
      ],
      "relations": [
         "director",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:director dbr:Clint_Eastwood ; dbo:starring dbr:Clint_Eastwood }"
   },
   {
      "id": "125",
      "en_ques": "which software has been developed by organizations founded in california?",
      "en_key": "organization, founded, california, develop, software",
      "de_ques": "welche softwareprodukte wurden von unternehmen entwickelt, die in kalifornien gegr\u00fcndet wurden?",
      "de_key": "unternehmen, gr\u00fcnden, kalifornien, entwickeln, softwareprodukt",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
      "entities": [
         "California"
      ],
      "relations": [
         "Software",
         "Company",
         "developer",
         "foundationPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Software . ?company a dbo:Company . ?uri dbo:developer ?company . ?company dbo:foundationPlace dbr:California }"
   },
   {
      "id": "126",
      "en_ques": "which instruments does cat stevens play?",
      "en_key": "cat stevens, instrument",
      "de_ques": "welche instrumente spielt cat stevens?",
      "de_key": "cat stevens, instrument",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri }",
      "entities": [
         "Cat_Stevens"
      ],
      "relations": [
         "instrument"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Cat_Stevens dbo:instrument ?uri }"
   },
   {
      "id": "127",
      "en_ques": "how many airlines are members of the star alliance?",
      "en_key": "how many, airlines, member, star alliance",
      "de_ques": "wieviele fluggesellschaften sind in der star alliance?",
      "de_key": "anzahl, fluggesellschaften, star alliance",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> ; <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/Star_Alliance> }",
      "entities": [
         "Star_Alliance"
      ],
      "relations": [
         "Airline",
         "alliance"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:Airline ; dbo:alliance dbr:Star_Alliance }"
   },
   {
      "id": "128",
      "en_ques": "give me all actors called baldwin.",
      "en_key": "actors, called, baldwin",
      "de_ques": "gib mir alle schauspieler, die baldwin hei\u00dfen.",
      "de_key": "schauspieler, hei\u00dfen, baldwin",
      "sparql": "PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri foaf:surname 'Baldwin'@en . { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Actor> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . } }",
      "entities": [
         "Actor"
      ],
      "relations": [
         "occupation",
         "Actor",
         "surname"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri foaf:surname 'Baldwin'@en . { ?uri dbo:occupation dbr:Actor . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Actor . } }"
   },
   {
      "id": "129",
      "en_ques": "who wrote the hunger games?",
      "en_key": "wrote, hunger games",
      "de_ques": "wer hat die tribute von panem geschrieben?",
      "de_key": "geschrieben, die tribute von panem",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Hunger_Games> <http://dbpedia.org/property/author> ?uri }",
      "entities": [
         "The_Hunger_Games"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:The_Hunger_Games dbp:author ?uri }"
   },
   {
      "id": "130",
      "en_ques": "for which label did elvis record his first album?",
      "en_key": "elvis, first, album, label",
      "de_ques": "welche plattenfirma hat elvis' erstes album aufgenommen?",
      "de_key": "elvis, erstes, album, plattenfirma",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
      "entities": [
         "Elvis_Presley"
      ],
      "relations": [
         "Album",
         "artist",
         "releaseDate",
         "recordLabel"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1"
   },
   {
      "id": "131",
      "en_ques": "is christian bale starring in batman begins?",
      "en_key": "christian bale, starring, batman begins",
      "de_ques": "spielt christian bale in batman begins mit?",
      "de_key": "christian bale, mitspielen, batman begins",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Batman_Begins dbo:starring res:Christian_Bale }",
      "entities": [
         "Batman_Begins",
         "Christian_Bale"
      ],
      "relations": [
         "starring"
      ],
      "fil_sparql": "ASK WHERE { res:Batman_Begins dbo:starring res:Christian_Bale }"
   },
   {
      "id": "132",
      "en_ques": "where is the residence of the prime minister of spain?",
      "en_key": "prime minister, spain, residence",
      "de_ques": "wo wohnt der premierminister von spanien?",
      "de_key": "premierminister, spanien, wohnen",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Prime_Minister_of_Spain> <http://dbpedia.org/property/residence> ?uri }",
      "entities": [
         "Prime_Minister_of_Spain"
      ],
      "relations": [
         "residence"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Prime_Minister_of_Spain dbp:residence ?uri }"
   },
   {
      "id": "133",
      "en_ques": "which actor was casted in the most movies?",
      "en_key": "actor, casted, most movies",
      "de_ques": "welcher schauspieler spielte in den meisten filmen mit?",
      "de_key": "schauspieler, meiste filme",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?f <http://dbpedia.org/ontology/starring> ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "Actor",
         "Film",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Actor . ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Film . ?f dbo:starring ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1"
   },
   {
      "id": "134",
      "en_ques": "which countries have more than two official languages?",
      "en_key": "country, official language, more than two",
      "de_ques": "welche l\u00e4nder haben mehr als zwei amtssprachen?",
      "de_key": "land, amtssprache, mehr als zwei",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> ; <http://dbpedia.org/ontology/officialLanguage> ?language } GROUP BY ?uri HAVING ( COUNT(?language) > 2 )",
      "entities": [],
      "relations": [
         "Country",
         "officialLanguage"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Country ; dbo:officialLanguage ?language } GROUP BY ?uri HAVING ( COUNT(?language)  2 )"
   },
   {
      "id": "135",
      "en_ques": "which countries have more than ten caves?",
      "en_key": "country, cave, more than ten",
      "de_ques": "in welchen l\u00e4ndern gibt es mehr als zehn h\u00f6hlen?",
      "de_key": "land, h\u00f6hle, mehr als zehn",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?cave a <http://dbpedia.org/ontology/Cave> { ?cave <http://dbpedia.org/ontology/location> ?uri } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc . ?loc <http://dbpedia.org/ontology/country> ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave) > 10 )",
      "entities": [],
      "relations": [
         "Country",
         "Cave",
         "location",
         "location",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Country . ?cave a dbo:Cave { ?cave dbo:location ?uri } UNION { ?cave dbo:location ?loc . ?loc dbo:country ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave)  10 )"
   },
   {
      "id": "136",
      "en_ques": "show me all songs from bruce springsteen released between 1980 and 1990.",
      "en_key": "song, bruce springsteen, release, between 1980 and 1990",
      "de_ques": "zeige mir alle lieder von bruce springsteen, die zwischen 1980 und 1990 herausgebracht wurden.",
      "de_key": "lied, bruce springsteen, herausbringen, zwischen 1980 und 1990",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song> . ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Bruce_Springsteen> . ?uri <http://dbpedia.org/ontology/releaseDate> ?date . FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date) }",
      "entities": [
         "Bruce_Springsteen"
      ],
      "relations": [
         "Song",
         "artist",
         "releaseDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Song . ?uri dbo:artist dbr:Bruce_Springsteen . ?uri dbo:releaseDate ?date . FILTER (?date = '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date) }"
   },
   {
      "id": "137",
      "en_ques": "which television shows were created by john cleese?",
      "en_key": "television show, create, john cleese",
      "de_ques": "welche fernsehserien hat john cleese entworfen?",
      "de_key": "fernsehserie, entwerfen, john cleese",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
      "entities": [
         "John_Cleese"
      ],
      "relations": [
         "TelevisionShow",
         "creator"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:TelevisionShow ; dbo:creator dbr:John_Cleese }"
   },
   {
      "id": "138",
      "en_ques": "when did latvia join the eu?",
      "en_key": "latvia, join, eu",
      "de_ques": "wann ist lettland der eu beigetreten?",
      "de_key": "lettland, beitreten, eu",
      "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Latvia> <http://dbpedia.org/property/accessioneudate> ?date }",
      "entities": [
         "Latvia"
      ],
      "relations": [
         "accessioneudate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { dbr:Latvia dbp:accessioneudate ?date }"
   },
   {
      "id": "139",
      "en_ques": "which soccer players were born on malta?",
      "en_key": "soccer player, born on, malta",
      "de_ques": "welche fu\u00dfballer wurden auf malta geboren?",
      "de_key": "fu\u00dfballer, geboren auf, malta",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
      "entities": [
         "Malta"
      ],
      "relations": [
         "SoccerPlayer",
         "birthPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:SoccerPlayer ; dbo:birthPlace dbr:Malta }"
   },
   {
      "id": "140",
      "en_ques": "how many politicians graduated from columbia university?",
      "en_key": "how many, politicians, graduated, columbia university",
      "de_ques": "wieviele politiker haben einen abschluss von der columbia university?",
      "de_key": "wieviele, politiker, abschluss, columbia university",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }",
      "entities": [
         "Politician",
         "Columbia_University"
      ],
      "relations": [
         "profession",
         "almaMater"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dbo:profession dbr:Politician ; dbo:almaMater dbr:Columbia_University }"
   },
   {
      "id": "141",
      "en_ques": "give me the birthdays of all actors of the television show charmed.",
      "en_key": "television show, charmed, actor, birthday",
      "de_ques": "gib mir die geburtstage von allen darstellern der fernsehserie charmed.",
      "de_key": "fernsehserie, charmed, darsteller, geburtstag",
      "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
      "entities": [
         "Charmed"
      ],
      "relations": [
         "starring",
         "birthDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { dbr:Charmed dbo:starring ?actor . ?actor dbo:birthDate ?date }"
   },
   {
      "id": "142",
      "en_ques": "which telecommunications organizations are located in belgium?",
      "en_key": "telecommunications organization, located, belgium",
      "de_ques": "welche telekommunikationsunternehmen haben ihren sitz in belgien?",
      "de_key": "telekommunikationsunternehmen, sitz, belgien",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, 'Telecommunications') } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> 'Belgium'@en } }",
      "entities": [
         "Telecommunication",
         "Belgium"
      ],
      "relations": [
         "Organisation",
         "industry",
         "location",
         "industry",
         "locationCountry"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:Organisation { ?uri dbo:industry dbr:Telecommunication } UNION { ?uri dbp:industry ?industry FILTER regex(?industry, 'Telecommunications') } { ?uri dbo:location dbr:Belgium } UNION { ?uri dbp:locationCountry 'Belgium'@en } }"
   },
   {
      "id": "143",
      "en_ques": "give me a list of all lakes in denmark.",
      "en_key": "lake, denmark",
      "de_ques": "gib mir eine liste aller seen in d\u00e4nemark.",
      "de_key": "see, d\u00e4nemark",
      "sparql": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> } UNION { ?uri a <http://dbpedia.org/class/yago/LakesOfDenmark> } }",
      "entities": [
         "Denmark"
      ],
      "relations": [
         "Lake",
         "country",
         "LakesOfDenmark"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { { ?uri a dbo:Lake ; dbo:country dbr:Denmark } UNION { ?uri a yago:LakesOfDenmark } }"
   },
   {
      "id": "144",
      "en_ques": "how many children does eddie murphy have?",
      "en_key": "children, eddie murphy",
      "de_ques": "wieviele kinder hat eddie murphy?",
      "de_key": "kinder, eddie murphy",
      "sparql": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Eddie_Murphy> <http://dbpedia.org/property/children> ?n }",
      "entities": [
         "Eddie_Murphy"
      ],
      "relations": [
         "children"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { dbr:Eddie_Murphy dbp:children ?n }"
   },
   {
      "id": "145",
      "en_ques": "show me all english gothic buildings in kent.",
      "en_key": "english gothic buildings, kent",
      "de_ques": "zeige mir alle geb\u00e4ude in kent, die im stil der englischen gothik erbaut wurden.",
      "de_key": "geb\u00e4ude, kent, englische gotik",
      "sparql": "SELECT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Building> ; <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/English_Gothic_architecture> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kent> }",
      "entities": [
         "English_Gothic_architecture",
         "Kent"
      ],
      "relations": [
         "Building",
         "architecturalStyle",
         "location"
      ],
      "fil_sparql": "SELECT ?uri WHERE { ?uri a dbo:Building ; dbo:architecturalStyle dbr:English_Gothic_architecture ; dbo:location dbr:Kent }"
   },
   {
      "id": "146",
      "en_ques": "who is the manager of real madrid?",
      "en_key": "manager, real madrid",
      "de_ques": "wer ist der manager von real madrid?",
      "de_key": "manager, real madrid",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Real_Madrid_C.F.> <http://dbpedia.org/ontology/manager> ?uri }",
      "entities": [
         "Real_Madrid_C.F."
      ],
      "relations": [
         "manager"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Real_Madrid_C.F. dbo:manager ?uri }"
   },
   {
      "id": "147",
      "en_ques": "in which countries can you pay using the west african cfa franc?",
      "en_key": "countries, pay, west african cfa franc",
      "de_ques": "in welchen l\u00e4ndern kann ich mit dem cfa-franc bceao bezahlen?",
      "de_key": "land, bezahlen, cfa-franc bceao",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
      "entities": [
         "West_African_CFA_franc"
      ],
      "relations": [
         "currency"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:currency dbr:West_African_CFA_franc }"
   },
   {
      "id": "148",
      "en_ques": "which holidays are celebrated around the world?",
      "en_key": "holidays, celebrated, world",
      "de_ques": "welche feiertage werden auf der welt gefeiert?",
      "de_key": "feiertage, welt, gefeiert",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
      "entities": [],
      "relations": [
         "Holiday"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }"
   },
   {
      "id": "149",
      "en_ques": "what is the longest river?",
      "en_key": "river, longest",
      "de_ques": "was ist der l\u00e4ngste fluss?",
      "de_key": "fluss, l\u00e4ngster",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> { ?uri <http://dbpedia.org/ontology/length> ?l } UNION { ?uri <http://dbpedia.org/property/length> ?l } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "River",
         "length",
         "length"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:River { ?uri dbo:length ?l } UNION { ?uri dbp:length ?l } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1"
   },
   {
      "id": "150",
      "en_ques": "which organizations were founded in 1930?",
      "en_key": "organization, founded, 1930",
      "de_ques": "welche unternehmen wurden 1930 gegr\u00fcndet?",
      "de_key": "unternehmen, gr\u00fcnden, 1930",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/formationYear> ?date } UNION { ?uri <http://dbpedia.org/ontology/foundingYear> ?date } FILTER regex(?date, '^1930') }",
      "entities": [],
      "relations": [
         "Organisation",
         "formationYear",
         "foundingYear"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } FILTER regex(?date, '^1930') }"
   },
   {
      "id": "151",
      "en_ques": "what is the birth name of angela merkel?",
      "en_key": "birth name, angela merkel",
      "de_ques": "was ist der geburtsname von angela merkel?",
      "de_key": "geburtsname, angela merkel",
      "sparql": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/property/birthName> ?string }",
      "entities": [
         "Angela_Merkel"
      ],
      "relations": [
         "birthName"
      ],
      "fil_sparql": "SELECT DISTINCT ?string WHERE { dbr:Angela_Merkel dbp:birthName ?string }"
   },
   {
      "id": "152",
      "en_ques": "who has tom cruise been married to?",
      "en_key": "tom cruise, married",
      "de_ques": "mit wem war tom cruise verheiratet?",
      "de_key": "tom cruise, verheiratet",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
      "entities": [
         "Tom_Cruise"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:spouse dbr:Tom_Cruise }"
   },
   {
      "id": "153",
      "en_ques": "which weapons did heckler & koch develop?",
      "en_key": "heckler & koch, develop, weapon",
      "de_ques": "welche waffen hat heckler & koch entwickelt?",
      "de_key": "heckler & koch, entwickler, waffe",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Weapon> ; <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Heckler_&_Koch> }",
      "entities": [
         "Heckler_&_Koch"
      ],
      "relations": [
         "Weapon",
         "designer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Weapon ; dbp:designer dbr:Heckler_&_Koch }"
   },
   {
      "id": "154",
      "en_ques": "what is the smallest city by area in germany?",
      "en_key": "smallest, city, germany",
      "de_ques": "was ist die kleinste stadt gemessen an der fl\u00e4che in deutschland? ",
      "de_key": "kleinste ,  stadt ,  deutschland ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core#> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; dbo:areaTotal ?area } ORDER BY ?area LIMIT 1",
      "entities": [
         "Cities_in_Germany"
      ],
      "relations": [
         "areaTotal"
      ],
      "fil_sparql": "SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; dbo:areaTotal ?area } ORDER BY ?area LIMIT 1"
   },
   {
      "id": "155",
      "en_ques": "what is the ruling party in lisbon?",
      "en_key": "lisbon, ruling party",
      "de_ques": "welche partei regiert in lissabon?",
      "de_key": "lissabon, regieren, partei",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lisbon> <http://dbpedia.org/property/leaderParty> ?uri }",
      "entities": [
         "Lisbon"
      ],
      "relations": [
         "leaderParty"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Lisbon dbp:leaderParty ?uri }"
   },
   {
      "id": "156",
      "en_ques": "how heavy is jupiter's lightest moon?",
      "en_key": "how heavy, jupiter, moon, lightest",
      "de_ques": "wie schwer ist jupiters leichtester mond?",
      "de_key": "wie schwer, jupiter, mond, leichtester",
      "sparql": "SELECT DISTINCT ?n WHERE { ?uri <http://dbpedia.org/property/satelliteOf> <http://dbpedia.org/resource/Jupiter> ; <http://dbpedia.org/ontology/mass> ?n } ORDER BY ASC(?n) OFFSET 0 LIMIT 1",
      "entities": [
         "Jupiter"
      ],
      "relations": [
         "mass",
         "satelliteOf"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { ?uri dbp:satelliteOf dbr:Jupiter ; dbo:mass ?n } ORDER BY ASC(?n) OFFSET 0 LIMIT 1"
   },
   {
      "id": "157",
      "en_ques": "how many employees does ibm have?",
      "en_key": "ibm, employees",
      "de_ques": "wieviele angestellte hat ibm?",
      "de_key": "ibm, angestellte",
      "sparql": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
      "entities": [
         "IBM"
      ],
      "relations": [
         "numberOfEmployees"
      ],
      "fil_sparql": "SELECT DISTINCT ?number WHERE { dbr:IBM dbo:numberOfEmployees ?number }"
   },
   {
      "id": "158",
      "en_ques": "list all episodes of the first season of the hbo television series the sopranos!",
      "en_key": "hbo, television series, sopranos, first season, episode",
      "de_ques": "liste alle episoden der ersten staffel der hbo-fernsehserie die sopranos auf.",
      "de_key": "hbo-fernsehserie, sopranos, erste staffel, episode",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
      "entities": [
         "The_Sopranos"
      ],
      "relations": [
         "series",
         "seasonNumber"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }"
   },
   {
      "id": "159",
      "en_ques": "what does icro stand for?",
      "en_key": "icro, stand for",
      "de_ques": "wof\u00fcr steht icro?",
      "de_key": "icro, stehen f\u00fcr",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/abbreviation> 'ICRO' }",
      "entities": [],
      "relations": [
         "abbreviation"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:abbreviation 'ICRO' }"
   },
   {
      "id": "160",
      "en_ques": "does the new battlestar galactica series have more episodes than the old one?",
      "en_key": "new battlestar galactica series, episodes, more, old battle star galactica series",
      "de_ques": "hat die neue battlestar-galactica-serie mehr episoden als die alte?",
      "de_key": "neue battlestar-galactica-serie, episoden, mehr, alte battlestar-galactica-serie",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> dbo:numberOfEpisodes ?x . <http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
      "entities": [
         "Battlestar_Galactica_%281978_TV_series%29",
         "Battlestar_Galactica_%282004_TV_series%29"
      ],
      "relations": [
         "numberOfEpisodes",
         "numberOfEpisodes"
      ],
      "fil_sparql": "ASK WHERE { dbr:Battlestar_Galactica_%281978_TV_series%29 dbo:numberOfEpisodes ?x . dbr:Battlestar_Galactica_%282004_TV_series%29 dbo:numberOfEpisodes ?y FILTER ( ?y  ?x ) }"
   },
   {
      "id": "161",
      "en_ques": "give me all films produced by hal roach.",
      "en_key": "film, produce, hal roach",
      "de_ques": "gib mir alle filme des produzenten hal roach.",
      "de_key": "film, produzent, hal roach",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
      "entities": [
         "Hal_Roach"
      ],
      "relations": [
         "Film",
         "producer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film ; dbo:producer dbr:Hal_Roach }"
   },
   {
      "id": "162",
      "en_ques": "who played agent smith in matrix?",
      "en_key": "played, agent smith, matrix",
      "de_ques": "wer hat agent smith in matrix gespielt?",
      "de_key": "gespielt, agent smith, matrix",
      "sparql": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Agent_Smith <http://dbpedia.org/ontology/portrayer> ?uri }",
      "entities": [
         "Agent_Smith"
      ],
      "relations": [
         "portrayer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Agent_Smith dbo:portrayer ?uri }"
   },
   {
      "id": "163",
      "en_ques": "which greek parties are pro-european?",
      "en_key": "greek party, pro-european",
      "de_ques": "welche griechischen parteien sind pro-europ\u00e4isch?",
      "de_key": "griechische parteien, pro-europ\u00e4isch",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
      "entities": [
         "Greece",
         "Pro-Europeanism"
      ],
      "relations": [
         "PoliticalParty",
         "country",
         "ideology"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:PoliticalParty ; dbo:country dbr:Greece ; dbo:ideology dbr:Pro-Europeanism }"
   },
   {
      "id": "164",
      "en_ques": "give me a list of all bandleaders that play trumpet.",
      "en_key": "bandleader, play, trumpet",
      "de_ques": "gib mir eine liste aller bandleader, die trompete spielen.",
      "de_key": "bandleader, spielen, trompete",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
      "entities": [
         "Bandleader",
         "Trumpet"
      ],
      "relations": [
         "occupation",
         "instrument"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Bandleader ; dbo:instrument dbr:Trumpet }"
   },
   {
      "id": "165",
      "en_ques": "what is the second highest mountain on earth?",
      "en_key": "mountain, second highest",
      "de_ques": "was ist der zweith\u00f6chste berg der erde?",
      "de_key": "berg, zweith\u00f6chster",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
      "entities": [],
      "relations": [
         "Mountain",
         "elevation"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Mountain ; dbo:elevation ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1"
   },
   {
      "id": "166",
      "en_ques": "is egypts largest city also its capital?",
      "en_key": "largest city, egypt, capital",
      "de_ques": "ist \u00e4gyptens gr\u00f6\u00dfte stadt auch seine hauptstadt?",
      "de_key": "gr\u00f6\u00dfte stadt, \u00e4gypten, hauptstadt",
      "sparql": "ASK WHERE { <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/largestCity> ?large ; <http://dbpedia.org/ontology/capital> ?capital FILTER ( ?large = ?capital ) }",
      "entities": [
         "Egypt"
      ],
      "relations": [
         "largestCity",
         "capital"
      ],
      "fil_sparql": "ASK WHERE { dbr:Egypt dbo:largestCity ?large ; dbo:capital ?capital FILTER ( ?large = ?capital ) }"
   },
   {
      "id": "167",
      "en_ques": "which rockets were launched from baikonur?",
      "en_key": "rockets, launched, baikonur",
      "de_ques": "welche raketen sind von baikonur gestartet?",
      "de_key": "raketen, start, baikonur",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
      "entities": [
         "Baikonur_Cosmodrome"
      ],
      "relations": [
         "Rocket",
         "launchSite"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Rocket ; dbo:launchSite dbr:Baikonur_Cosmodrome }"
   },
   {
      "id": "168",
      "en_ques": "how many programming languages are there?",
      "en_key": "how many, programming languages",
      "de_ques": "wieviele programmiersprachen gibt es?",
      "de_key": "wieviele, programmiersprachen",
      "sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
      "entities": [],
      "relations": [
         "ProgrammingLanguage"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:ProgrammingLanguage }"
   },
   {
      "id": "169",
      "en_ques": "which chess players died in the same place they were born in?",
      "en_key": "chess players, british earl, die, same, place, born",
      "de_ques": "welche schachspieler starben am selben ort, an dem sie geboren wurden?",
      "de_key": "schachspieler, gestorben, gleich, ort, geboren",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ChessPlayer> ; <http://dbpedia.org/ontology/birthPlace> ?x ; <http://dbpedia.org/ontology/deathPlace> ?y FILTER ( ?x = ?y ) }",
      "entities": [],
      "relations": [
         "ChessPlayer",
         "birthPlace",
         "deathPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:ChessPlayer ; dbo:birthPlace ?x ; dbo:deathPlace ?y FILTER ( ?x = ?y ) }"
   },
   {
      "id": "170",
      "en_ques": "who is the owner of facebook?",
      "en_key": "owner, facebook",
      "de_ques": "wem geh\u00f6rt facebook?",
      "de_key": "geh\u00f6rt, facebook",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri }",
      "entities": [
         "Facebook"
      ],
      "relations": [
         "foundedBy"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Facebook dbo:foundedBy ?uri }"
   },
   {
      "id": "171",
      "en_ques": "give me all movies with tom cruise.",
      "en_key": "movie, tom cruise",
      "de_ques": "gib mir alle filme mit tom cruise.",
      "de_key": "film, tom cruise",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
      "entities": [
         "Tom_Cruise"
      ],
      "relations": [
         "Film",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film ; dbo:starring dbr:Tom_Cruise }"
   },
   {
      "id": "172",
      "en_ques": "in which u.s. state is fort knox located?",
      "en_key": "fort knox, located, u.s. state",
      "de_ques": "in welchem us-bundesstaat liegt fort knox?",
      "de_key": "fort knox, liegen, us-bundesstaat",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbo:location ?uri . ?uri dbo:country res:United_States }",
      "entities": [
         "Fort_Knox",
         "United_States"
      ],
      "relations": [
         "location",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbo:location ?uri . ?uri dbo:country res:United_States }"
   },
   {
      "id": "173",
      "en_ques": "give me all cities in new jersey with more than 100000 inhabitants.",
      "en_key": "new jersey, city, inhabitants, more than 100000",
      "de_ques": "gib mir alle st\u00e4dte in new jersey, die mehr als 100000 einwohner haben.",
      "de_key": "new jersey, stadt, einwohner, mehr als 100000",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:isPartOf res:New_Jersey ; dbo:populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }",
      "entities": [
         "New_Jersey"
      ],
      "relations": [
         "City",
         "isPartOf",
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:isPartOf res:New_Jersey ; dbo:populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }"
   },
   {
      "id": "174",
      "en_ques": "which mountains are higher than the nanga parbat?",
      "en_key": "mountain, higher, nanga parbat",
      "de_ques": "welche berge sind h\u00f6her als der nanga parbat?",
      "de_key": "berg, h\u00f6her, nanga parbat",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nanga_Parbat> <http://dbpedia.org/ontology/elevation> ?elevation . ?uri a <http://dbpedia.org/ontology/Mountain> { ?uri <http://dbpedia.org/ontology/elevation> ?otherelevation } UNION { ?uri <http://dbpedia.org/property/elevationM> ?otherelevation } FILTER ( ?otherelevation > ?elevation ) }",
      "entities": [
         "Nanga_Parbat"
      ],
      "relations": [
         "elevation",
         "Mountain",
         "elevation",
         "elevationM"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Nanga_Parbat dbo:elevation ?elevation . ?uri a dbo:Mountain { ?uri dbo:elevation ?otherelevation } UNION { ?uri dbp:elevationM ?otherelevation } FILTER ( ?otherelevation  ?elevation ) }"
   },
   {
      "id": "175",
      "en_ques": "give me all b-sides of the ramones.",
      "en_key": "ramones, b-sides",
      "de_ques": "gib mir alle b-seiten der ramones.",
      "de_key": "ramones, b-seiten",
      "sparql": "SELECT DISTINCT ?string WHERE { ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Ramones> ; <http://dbpedia.org/ontology/bSide> ?string }",
      "entities": [
         "Ramones"
      ],
      "relations": [
         "musicalArtist",
         "bSide"
      ],
      "fil_sparql": "SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist dbr:Ramones ; dbo:bSide ?string }"
   },
   {
      "id": "176",
      "en_ques": "what are the specialities of the unc health care?",
      "en_key": "specialities, unc health care",
      "de_ques": "worauf ist die unc health care spezialisiert?",
      "de_key": "spezialisierung, unc health care",
      "sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri }",
      "entities": [
         "UNC_Health_Care"
      ],
      "relations": [
         "speciality"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:UNC_Health_Care dbp:speciality ?uri }"
   },
   {
      "id": "177",
      "en_ques": "when was olof palme shot?",
      "en_key": "date, olof palme, shot",
      "de_ques": "wann wurde olof palme erschossen?",
      "de_key": "datum, olof palme, erschossen",
      "sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
      "entities": [
         "Olof_Palme"
      ],
      "relations": [
         "deathDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { dbr:Olof_Palme dbo:deathDate ?date }"
   },
   {
      "id": "178",
      "en_ques": "list the seven kings of rome.",
      "en_key": "kings, rome",
      "de_ques": "gib mir eine liste aller k\u00f6nige von rom.",
      "de_key": "k\u00f6nige, rom",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/King_of_Rome> }",
      "entities": [
         "King_of_Rome"
      ],
      "relations": [
         "title"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbp:title dbr:King_of_Rome }"
   },
   {
      "id": "179",
      "en_ques": "give me all people that were born in vienna and died in berlin.",
      "en_key": "people, born, vienna, die, berlin",
      "de_ques": "gib mir alle personen, die in wien geboren wurden und in berlin gestorben sind.",
      "de_key": "person, geboren, wien, gestorben, berlin",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
      "entities": [
         "Vienna",
         "Berlin"
      ],
      "relations": [
         "birthPlace",
         "deathPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:birthPlace dbr:Vienna ; dbo:deathPlace dbr:Berlin }"
   },
   {
      "id": "180",
      "en_ques": "is darth vader luke\u2019s father?",
      "en_key": "darth vader, father, luke",
      "de_ques": "ist darth vader lukes vater?",
      "de_key": "darth vader, vater, luke",
      "sparql": "ASK WHERE { <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Luke_Skywalker> }",
      "entities": [
         "Darth_Vader",
         "Luke_Skywalker"
      ],
      "relations": [
         "child"
      ],
      "fil_sparql": "ASK WHERE { dbr:Darth_Vader dbo:child dbr:Luke_Skywalker }"
   },
   {
      "id": "181",
      "en_ques": "show me all the breweries in australia.",
      "en_key": "breweries, australia",
      "de_ques": "zeig mir alle brauereien in australien.",
      "de_key": "brauereien, australien",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Brewery> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
      "entities": [
         "Australia",
         "Australia"
      ],
      "relations": [
         "Brewery",
         "location",
         "location",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Brewery { ?uri dbo:location dbr:Australia } UNION { ?uri dbo:location ?x . ?x dbo:country dbr:Australia } }"
   },
   {
      "id": "182",
      "en_ques": "give me all films produced by steven spielberg with a budget of at least $80 million.",
      "en_key": "films, producer, steven spielberg, production budget, $80 million",
      "de_ques": "gib mir alle filme, die von steven spielberg produziert wurden und ein budget von mindestens 80 millionen dollar hatten.",
      "de_key": "film, produzent, steven spielberg, budget, $80 millionen",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Steven_Spielberg> . ?uri <http://dbpedia.org/ontology/budget> ?b . FILTER( xsd:double(?b) >= 8.0E7 ) }",
      "entities": [
         "Steven_Spielberg"
      ],
      "relations": [
         "Film",
         "director",
         "budget"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type dbo:Film . ?uri dbo:director dbr:Steven_Spielberg . ?uri dbo:budget ?b . FILTER( xsd:double(?b) = 8.0E7 ) }"
   },
   {
      "id": "183",
      "en_ques": "give me all soccer clubs in spain.",
      "en_key": "spain, soccer club",
      "de_ques": "gib mir alle fu\u00dfballvereine in spanien.",
      "de_key": "fu\u00dfballverein, spanien",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, 'Spain') } }",
      "entities": [
         "Spain"
      ],
      "relations": [
         "SoccerClub",
         "ground",
         "ground"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:SoccerClub { ?uri dbo:ground dbr:Spain } UNION { ?uri dbp:ground ?ground FILTER regex(?ground, 'Spain') } }"
   },
   {
      "id": "184",
      "en_ques": "who produced films starring natalie portman?",
      "en_key": "produce, film, starring, natalie portman",
      "de_ques": "wer produzierte filme, in denen natalie portman mitspielt?",
      "de_key": "produzieren, film, mitspielen, natalie portman",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?film a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Natalie_Portman> ; <http://dbpedia.org/ontology/producer> ?uri }",
      "entities": [
         "Natalie_Portman"
      ],
      "relations": [
         "Film",
         "starring",
         "producer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?film a dbo:Film ; dbo:starring dbr:Natalie_Portman ; dbo:producer ?uri }"
   },
   {
      "id": "185",
      "en_ques": "give me all breeds of the german shepherd dog.",
      "en_key": "breed, german shepherd dog",
      "de_ques": "gib mir alle sch\u00e4ferhundrassen.",
      "de_key": "sch\u00e4ferhundrasse",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/breed> <http://dbpedia.org/resource/German_Shepherd> }",
      "entities": [
         "German_Shepherd"
      ],
      "relations": [
         "breed"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbp:breed dbr:German_Shepherd }"
   },
   {
      "id": "186",
      "en_ques": "who is the heaviest player of the chicago bulls?",
      "en_key": "heaviest player, chicago bulls",
      "de_ques": "wer ist der schwerste spieler der chicago bulls?",
      "de_key": "schwerster spieler, chicago bulls",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
      "entities": [
         "Chicago_Bulls",
         "Chicago_Bulls",
         "Chicago_Bulls"
      ],
      "relations": [
         "Person",
         "weight",
         "draftTeam",
         "team",
         "draftTeam"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a dbo:Person ; dbo:weight ?num { ?uri dbp:team dbr:Chicago_Bulls } UNION { ?uri dbp:draftTeam dbr:Chicago_Bulls } UNION { ?uri dbo:draftTeam dbr:Chicago_Bulls } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
   },
   {
      "id": "187",
      "en_ques": "which languages are spoken in estonia?",
      "en_key": "language, spoken, estonia",
      "de_ques": "welche sprachen werden in estland gesprochen?",
      "de_key": "sprache, sprechen, estland",
      "sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> }",
      "entities": [
         "Estonia"
      ],
      "relations": [
         "spokenIn"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:spokenIn dbr:Estonia }"
   },
   {
      "id": "188",
      "en_ques": "what is the largest country in the world?",
      "en_key": "largest country, world",
      "de_ques": "was ist das gr\u00f6\u00dfte land der welt?",
      "de_key": "gr\u00f6\u00dftes land",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "Country",
         "areaTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1"
   },
   {
      "id": "189",
      "en_ques": "what is the largest city in america?",
      "en_key": "largest, city, america",
      "de_ques": "was ist das gr\u00f6\u00dften stadt im amerika? ",
      "de_key": "gr\u00f6\u00dften ,  stadt ,  amerika ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?lcity WHERE { dbr:United_States dbo:largestCity ?lcity }",
      "entities": [
         "United_States"
      ],
      "relations": [
         "largestCity"
      ],
      "fil_sparql": "SELECT ?lcity WHERE { dbr:United_States dbo:largestCity ?lcity }"
   },
   {
      "id": "190",
      "en_ques": "who was the pope that founded the vatican television?",
      "en_key": "pope, founded, vatican television",
      "de_ques": "welcher papst hat das vatikanische fernsehen gegr\u00fcndet?",
      "de_key": "papst, gegr\u00fcndet, vatikanisches fernsehen",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Pope . res:Vatican_Television_Center dbo:foundedBy ?uri }",
      "entities": [
         "Vatican_Television_Center"
      ],
      "relations": [
         "Pope",
         "foundedBy"
      ],
      "fil_sparql": "SELECT ?uri WHERE { ?uri rdf:type dbo:Pope . res:Vatican_Television_Center dbo:foundedBy ?uri }"
   },
   {
      "id": "191",
      "en_ques": "who discovered ceres?",
      "en_key": "discoverer, ceres",
      "de_ques": "wer entdeckte ceres?",
      "de_key": "ceres, entdecker",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
      "entities": [
         "Ceres_(dwarf_planet)"
      ],
      "relations": [
         "discoverer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Ceres_(dwarf_planet) dbo:discoverer ?uri }"
   },
   {
      "id": "192",
      "en_ques": "who is the king of the netherlands?",
      "en_key": "king, the netherlands",
      "de_ques": "wer ist der k\u00f6nig der niederlande?",
      "de_key": "k\u00f6nig, niederlande",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Netherlands dbo:leader ?uri . ?uri rdf:type dbo:Royalty }",
      "entities": [
         "Netherlands"
      ],
      "relations": [
         "leader",
         "Royalty"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Netherlands dbo:leader ?uri . ?uri rdf:type dbo:Royalty }"
   },
   {
      "id": "193",
      "en_ques": "is cola a beverage?",
      "en_key": "cola, beverage",
      "de_ques": "ist cola ein getr\u00e4nk?",
      "de_key": "cola, getr\u00e4nk",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Cola rdf:type dbo:Beverage }",
      "entities": [
         "Cola"
      ],
      "relations": [
         "Beverage"
      ],
      "fil_sparql": "ASK WHERE { res:Cola rdf:type dbo:Beverage }"
   },
   {
      "id": "194",
      "en_ques": "what is the alma mater of the chancellor of germany angela merkel?",
      "en_key": "angela merkel",
      "de_ques": "was ist das alma mater von das kanzler von deutschland angela merkel? ",
      "de_key": "angela merkel ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
      "entities": [
         "Angela_Merkel"
      ],
      "relations": [
         "almaMater"
      ],
      "fil_sparql": "SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }"
   },
   {
      "id": "195",
      "en_ques": "who wrote the book les piliers de la terre?",
      "en_key": "wrote, book, the pillars of the earth",
      "de_ques": "wer schrieb das buch die s\u00e4ulen der erde?",
      "de_key": "schreiben, buch, die s\u00e4ulen der erde",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
      "entities": [
         "The_Pillars_of_the_Earth"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }"
   },
   {
      "id": "196",
      "en_ques": "which airports does yeti airlines serve?",
      "en_key": "airports, yeti airlines",
      "de_ques": "welche flugh\u00e4fen fliegt yeti airlines an?",
      "de_key": "flugh\u00e4fen, anfliegen, yeti airlines",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Yeti_Airlines dbo:targetAirport ?uri }",
      "entities": [
         "Yeti_Airlines"
      ],
      "relations": [
         "targetAirport"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Yeti_Airlines dbo:targetAirport ?uri }"
   },
   {
      "id": "197",
      "en_ques": "where is the birthplace of goethe?",
      "en_key": "goethe",
      "de_ques": "woher ist das geburtsort von goethe? ",
      "de_key": "goethe ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Goethe WHERE { dbr:Johann_Wolfgang_von_Goethe dbo:birthPlace ?Goethe }",
      "entities": [
         "Johann_Wolfgang_von_Goethe"
      ],
      "relations": [
         "birthPlace"
      ],
      "fil_sparql": "SELECT ?Goethe WHERE { dbr:Johann_Wolfgang_von_Goethe dbo:birthPlace ?Goethe }"
   },
   {
      "id": "198",
      "en_ques": "was the cuban missile crisis earlier than the bay of pigs invasion?",
      "en_key": "cuban missile crisis, earlier, bay of pigs invasion",
      "de_ques": "war die kubakrise vor der schweinebuchtinvasion?",
      "de_key": "kubakrise, vor, schweinebuchtinvasion",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_Missile_Crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y FILTER ( ?x < ?y ) }",
      "entities": [
         "Cuban_Missile_Crisis",
         "Bay_of_Pigs_Invasion"
      ],
      "relations": [
         "date",
         "date"
      ],
      "fil_sparql": "ASK WHERE { res:Cuban_Missile_Crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y FILTER ( ?x < ?y ) }"
   },
   {
      "id": "199",
      "en_ques": "which ingredients do i need for carrot cake?",
      "en_key": "carrot cake, ingredients",
      "de_ques": "welche zutaten brauche ich f\u00fcr m\u00f6hrenkuchen?",
      "de_key": "m\u00f6hrenkuchen, zutaten",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Carrot_cake dbo:ingredient ?uri }",
      "entities": [
         "Carrot_cake"
      ],
      "relations": [
         "ingredient"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Carrot_cake dbo:ingredient ?uri }"
   },
   {
      "id": "200",
      "en_ques": "who created wikipedia?",
      "en_key": "wikipedia, created",
      "de_ques": "wer hat wikipedia gegr\u00fcndet?",
      "de_key": "wikipedia, gr\u00fcnden",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri }",
      "entities": [
         "Wikipedia"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri }"
   },
   {
      "id": "201",
      "en_ques": "what is the highest mountain in saxony germany?",
      "en_key": "highest, mountain, saxony, germany",
      "de_ques": "was ist das h\u00f6chste berg im sachsen deutschland? ",
      "de_key": "h\u00f6chste ,  berg ,  sachsen ,  deutschland ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?m WHERE { ?m dbo:mountainRange dbr:Ore_Mountains ; dbo:elevation ?height } ORDER BY DESC(?height) LIMIT 1",
      "entities": [
         "Ore_Mountains"
      ],
      "relations": [
         "mountainRange",
         "elevation"
      ],
      "fil_sparql": "SELECT ?m WHERE { ?m dbo:mountainRange dbr:Ore_Mountains ; dbo:elevation ?height } ORDER BY DESC(?height) LIMIT 1"
   },
   {
      "id": "202",
      "en_ques": "who is the current federal minister of finance in germany?",
      "en_key": "federal minister of finance, germany",
      "de_ques": "wer ist das strom bundes minister von finanzen im deutschland? ",
      "de_key": "bundes minister von finanzen ,  deutschland ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> dbo:leader ?leader }",
      "entities": [
         "Federal_Ministry_of_Finance_(Germany)"
      ],
      "relations": [
         "leader"
      ],
      "fil_sparql": "SELECT ?leader WHERE { dbr:Federal_Ministry_of_Finance_(Germany) dbo:leader ?leader }"
   },
   {
      "id": "203",
      "en_ques": "in which country is mecca located?",
      "en_key": "country, located, mecca",
      "de_ques": "in welchem land liegt mekka?",
      "de_key": "land, mekka",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
      "entities": [
         "Mecca"
      ],
      "relations": [
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }"
   },
   {
      "id": "204",
      "en_ques": "who played gus fring in breaking bad?",
      "en_key": "play, gus fring, breaking bad",
      "de_ques": "wer hat gus fring in breaking bad gespielt?",
      "de_key": "gus fring, breaking bad, schauspieler",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Gus_Fring dbo:portrayer ?uri }",
      "entities": [
         "Gus_Fring"
      ],
      "relations": [
         "portrayer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Gus_Fring dbo:portrayer ?uri }"
   },
   {
      "id": "205",
      "en_ques": "in which country does the nile start?",
      "en_key": "nile, start, country",
      "de_ques": "in welchem land entspringt der nil?",
      "de_key": "nil, entspringen, land",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri }",
      "entities": [
         "Nile"
      ],
      "relations": [
         "sourceCountry"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri }"
   },
   {
      "id": "206",
      "en_ques": "in which state penn state university is located?",
      "en_key": "penn state university",
      "de_ques": "im welche zustand penn zustand universit\u00e4t ist gelegen? ",
      "de_key": "penn zustand universit\u00e4t ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University dbo:state ?s }",
      "entities": [
         "Pennsylvania_State_University"
      ],
      "relations": [
         "state"
      ],
      "fil_sparql": "SELECT ?s WHERE { dbr:Pennsylvania_State_University dbo:state ?s }"
   },
   {
      "id": "207",
      "en_ques": "what is the biggest stadium in spain?",
      "en_key": "biggest stadium, spain",
      "de_ques": "was ist das gr\u00f6\u00dfte stadion in spanien?",
      "de_key": "spanien, gr\u00f6\u00dftes stadium",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Stadium ; dbo:location res:Spain ; dbo:seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
      "entities": [
         "Spain"
      ],
      "relations": [
         "Stadium",
         "location",
         "seatingCapacity"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Stadium ; dbo:location res:Spain ; dbo:seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1"
   },
   {
      "id": "208",
      "en_ques": "who is the coach of ankara's ice hockey team?",
      "en_key": "coach, ice hockey team, ankara",
      "de_ques": "wer ist der trainer von ankaras eishockeymannschaft?",
      "de_key": "ankara, eishockeymannschaft, trainer",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:city res:Ankara ; dbo:league res:Turkish_Ice_Hockey_First_League ; dbo:coach ?uri }",
      "entities": [
         "Ankara",
         "Turkish_Ice_Hockey_First_League"
      ],
      "relations": [
         "city",
         "league",
         "coach"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?x dbo:city res:Ankara ; dbo:league res:Turkish_Ice_Hockey_First_League ; dbo:coach ?uri }"
   },
   {
      "id": "209",
      "en_ques": "how large is the area of uk?",
      "en_key": "area, uk",
      "de_ques": "wie gro\u00df ist das bereich von vereinigtes k\u00f6nigreich? ",
      "de_key": "bereich ,  vereinigtes k\u00f6nigreich ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?area WHERE { dbr:United_Kingdom dbo:areaTotal ?area }",
      "entities": [
         "United_Kingdom"
      ],
      "relations": [
         "areaTotal"
      ],
      "fil_sparql": "SELECT ?area WHERE { dbr:United_Kingdom dbo:areaTotal ?area }"
   },
   {
      "id": "210",
      "en_ques": "who created batman?",
      "en_key": "batman, creator",
      "de_ques": "wer hat batman erfunden?",
      "de_key": "batman, erfinder",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
      "entities": [
         "Batman"
      ],
      "relations": [
         "creator"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }"
   },
   {
      "id": "211",
      "en_ques": "was sigmund freud married?",
      "en_key": "sigmund freud, married",
      "de_ques": "war sigmund freud verheiratet?",
      "de_key": "sigmund freud, verheiratet",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Sigmund_Freud dbo:spouse ?uri }",
      "entities": [
         "Sigmund_Freud"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "ASK WHERE { dbr:Sigmund_Freud dbo:spouse ?uri }"
   },
   {
      "id": "212",
      "en_ques": "who are the developers of dbpedia?",
      "en_key": "developers, dbpedia",
      "de_ques": "wer sind die entwickler von dbpedia?",
      "de_key": "entwickler, dbpedia",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:DBpedia dbo:developer ?uri }",
      "entities": [
         "DBpedia"
      ],
      "relations": [
         "developer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:DBpedia dbo:developer ?uri }"
   },
   {
      "id": "213",
      "en_ques": "give me all movies directed by francis ford coppola.",
      "en_key": "movie, direct, francis ford coppola",
      "de_ques": "gib mir alle filme, bei denen francis ford coppola regie gef\u00fchrt hat.",
      "de_key": "film, regie, francis ford coppola",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
      "entities": [
         "Francis_Ford_Coppola"
      ],
      "relations": [
         "Film",
         "director"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }"
   },
   {
      "id": "214",
      "en_ques": "are tree frogs a type of amphibian?",
      "en_key": "tree frog, amphibian",
      "de_ques": "sind laubfr\u00f6sche amphibien?",
      "de_key": "laubfrosch, amphibie",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Hylidae dbo:class res:Amphibian }",
      "entities": [
         "Hylidae",
         "Amphibian"
      ],
      "relations": [
         "class"
      ],
      "fil_sparql": "ASK WHERE { res:Hylidae dbo:class res:Amphibian }"
   },
   {
      "id": "215",
      "en_ques": "what is the location of the houses of parliament?",
      "en_key": "location, houses of parliament",
      "de_ques": "wo ist der westminster-palast?",
      "de_key": "ort, westminster-palast",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT ?uri WHERE { res:Palace_of_Westminster dbo:location ?uri }",
      "entities": [
         "Palace_of_Westminster"
      ],
      "relations": [
         "location"
      ],
      "fil_sparql": "SELECT ?uri WHERE { res:Palace_of_Westminster dbo:location ?uri }"
   },
   {
      "id": "216",
      "en_ques": "how much is the elevation of d\u00fcsseldorf airport ?",
      "en_key": "d\u00fcsseldorf airport",
      "de_ques": "wie viel ist das elevation von d\u00fcsseldorf flughafen ? ",
      "de_key": "d\u00fcsseldorf flughafen ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
      "entities": [
         "D\u00fcsseldorf_Airport"
      ],
      "relations": [
         "elevation"
      ],
      "fil_sparql": "SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1"
   },
   {
      "id": "217",
      "en_ques": "how much is the population of mexico city ?",
      "en_key": "mexico city",
      "de_ques": "wie viel ist das population von mexiko stadt ? ",
      "de_key": "mexiko stadt ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
      "entities": [
         "Mexico_City"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }"
   },
   {
      "id": "218",
      "en_ques": "when was the founding date of french fifth republic?",
      "en_key": "french fifth republic",
      "de_ques": "wann war das gr\u00fcndung datum von franz\u00f6sisch f\u00fcnfte republik? ",
      "de_key": "franz\u00f6sisch f\u00fcnfte republik ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ff WHERE { dbr:French_Fifth_Republic dbo:foundingDate ?ff }",
      "entities": [
         "French_Fifth_Republic"
      ],
      "relations": [
         "foundingDate"
      ],
      "fil_sparql": "SELECT ?ff WHERE { dbr:French_Fifth_Republic dbo:foundingDate ?ff }"
   },
   {
      "id": "219",
      "en_ques": "who was the first king of england?",
      "en_key": "first king of england",
      "de_ques": "wer war der erste k\u00f6nig von england?",
      "de_key": "erste k\u00f6nig von england",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Royalty ; rdf:type yago:WikicatEnglishMonarchs ; dbo:activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "Royalty",
         "activeYearsStartYear",
         "WikicatEnglishMonarchs"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Royalty ; rdf:type yago:WikicatEnglishMonarchs ; dbo:activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1"
   },
   {
      "id": "220",
      "en_ques": "who is the editor of forbes?",
      "en_key": "forbes, editor",
      "de_ques": "wer ist der herausgeber von forbes?",
      "de_key": "forbes, herausgeber",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri }",
      "entities": [
         "Forbes"
      ],
      "relations": [
         "editor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri }"
   },
   {
      "id": "221",
      "en_ques": "which awards did douglas hofstadter win?",
      "en_key": "douglas hofstadter, award",
      "de_ques": "welche preise hat douglas hofstadter gewonnen?",
      "de_key": "douglas hofstadter, preise",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Douglas_Hofstadter dbo:award ?uri }",
      "entities": [
         "Douglas_Hofstadter"
      ],
      "relations": [
         "award"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Douglas_Hofstadter dbo:award ?uri }"
   },
   {
      "id": "222",
      "en_ques": "who is the youngest darts player?",
      "en_key": "darts player, youngest",
      "de_ques": "wer ist der j\u00fcngste dartspieler?",
      "de_key": "dartspieler, j\u00fcngster",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:DartsPlayer ; dbo:birthDate ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "DartsPlayer",
         "birthDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:DartsPlayer ; dbo:birthDate ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1"
   },
   {
      "id": "223",
      "en_ques": "is horse racing a sport?",
      "en_key": "horse racing, sport",
      "de_ques": "ist pferderennen ein sport",
      "de_key": "pferderennen, sport",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Horse_racing rdf:type dbo:Sport }",
      "entities": [
         "Horse_racing"
      ],
      "relations": [
         "Sport"
      ],
      "fil_sparql": "ASK WHERE { dbr:Horse_racing rdf:type dbo:Sport }"
   },
   {
      "id": "224",
      "en_ques": "which river does the brooklyn bridge cross?",
      "en_key": "river, cross, brooklyn bridge",
      "de_ques": "welchen fluss \u00fcberspannt die brooklyn bridge?",
      "de_key": "fluss, \u00fcberspannen, brooklyn bridge",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
      "entities": [
         "Brooklyn_Bridge"
      ],
      "relations": [
         "crosses"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }"
   },
   {
      "id": "225",
      "en_ques": "how many people live in poland?",
      "en_key": "how many people, poland",
      "de_ques": "wieviele menschen leben in polen?",
      "de_key": "polen, einwohner",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:populationTotal ?uri }",
      "entities": [
         "Poland"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Poland dbo:populationTotal ?uri }"
   },
   {
      "id": "226",
      "en_ques": "when was the last episode of the tv series friends aired?",
      "en_key": "last episode, friends tv show",
      "de_ques": "wann war das letzte folge von das fernseher serie freunde ausgestrahlt? ",
      "de_key": "letzte folge ,  freunde fernseher show ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date WHERE { dbr:Friends dbo:completionDate ?date }",
      "entities": [
         "Friends"
      ],
      "relations": [
         "completionDate"
      ],
      "fil_sparql": "SELECT ?date WHERE { dbr:Friends dbo:completionDate ?date }"
   },
   {
      "id": "227",
      "en_ques": "is the wife of president obama called michelle?",
      "en_key": "obama, president, wife, called, michelle",
      "de_ques": "hei\u00dft die frau von pr\u00e4sident obama michelle?",
      "de_key": "obama, pr\u00e4sident, frau, hei\u00dfen, michelle",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Barack_Obama dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, 'Michelle') }",
      "entities": [
         "Barack_Obama"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "ASK WHERE { res:Barack_Obama dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, 'Michelle') }"
   },
   {
      "id": "229",
      "en_ques": "who is 8th president of us?",
      "en_key": "8th president, usa",
      "de_ques": "wer ist 8. pr\u00e4sident von uns? ",
      "de_key": "8. pr\u00e4sident ,  usa ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:8th_President_of_the_United_States dbo:wikiPageRedirects ?link . ?link dbp:name ?name }",
      "entities": [
         "8th_President_of_the_United_States"
      ],
      "relations": [
         "wikiPageRedirects",
         "name"
      ],
      "fil_sparql": "SELECT ?name WHERE { dbr:8th_President_of_the_United_States dbo:wikiPageRedirects ?link . ?link dbp:name ?name }"
   },
   {
      "id": "230",
      "en_ques": "how much is the total population of  european union?",
      "en_key": "european union",
      "de_ques": "wie viel ist das gesamt population von europ\u00e4isch union? ",
      "de_key": "europ\u00e4isch union ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
      "entities": [
         "European_Union"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }"
   },
   {
      "id": "231",
      "en_ques": "give me all launch pads operated by nasa.",
      "en_key": "launch pad, operate, nasa",
      "de_ques": "gib mir alle von der nasa betriebenen startrampen.",
      "de_key": "startrampe, betreiben, nasa",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad ; dbo:operator res:NASA }",
      "entities": [
         "NASA"
      ],
      "relations": [
         "LaunchPad",
         "operator"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad ; dbo:operator res:NASA }"
   },
   {
      "id": "232",
      "en_ques": "who developed the video game world of warcraft?",
      "en_key": "video game, world of warcraft, develop",
      "de_ques": "wer hat das videospiel world of warcraft entwickelt?",
      "de_key": "videospiel, world of warcraft, entwickeln",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
      "entities": [
         "World_of_Warcraft"
      ],
      "relations": [
         "developer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }"
   },
   {
      "id": "233",
      "en_ques": "what is the birth name of adele?",
      "en_key": "adele",
      "de_ques": "was ist das geburt name von adele? ",
      "de_key": "adele ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
      "entities": [
         "Adele"
      ],
      "relations": [
         "birthName"
      ],
      "fil_sparql": "SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }"
   },
   {
      "id": "234",
      "en_ques": "what is the population of cairo?",
      "en_key": "population, cairo",
      "de_ques": "was ist das population von kairo? ",
      "de_key": "population ,  kairo ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
      "entities": [
         "Cairo"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }"
   },
   {
      "id": "235",
      "en_ques": "is frank herbert still alive?",
      "en_key": "frank herbert, alive",
      "de_ques": "lebt frank herbert noch?",
      "de_key": "frank herbert, leben",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { OPTIONAL { res:Frank_Herbert dbo:deathDate ?date } FILTER ( ! bound(?date) ) }",
      "entities": [
         "Frank_Herbert"
      ],
      "relations": [
         "deathDate"
      ],
      "fil_sparql": "ASK WHERE { OPTIONAL { res:Frank_Herbert dbo:deathDate ?date } FILTER ( ! bound(?date) ) }"
   },
   {
      "id": "236",
      "en_ques": "what is the last work of dan brown?",
      "en_key": "last work, dan brown",
      "de_ques": "was ist das letzte arbeit von und braun? ",
      "de_key": "letzte arbeit ,  und braun ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?book WHERE { { ?book dbo:author dbr:Dan_Brown . ?book dbp:releaseDate ?date } UNION { ?book dbo:author dbr:Dan_Brown . ?book dbo:publicationDate ?date} } ORDER BY DESC(xsd:date(?date)) LIMIT 1",
      "entities": [
         "Dan_Brown",
         "Dan_Brown"
      ],
      "relations": [
         "author",
         "author",
         "publicationDate",
         "releaseDate"
      ],
      "fil_sparql": "SELECT ?book WHERE { { ?book dbo:author dbr:Dan_Brown . ?book dbp:releaseDate ?date } UNION { ?book dbo:author dbr:Dan_Brown . ?book dbo:publicationDate ?date} } ORDER BY DESC(xsd:date(?date)) LIMIT 1"
   },
   {
      "id": "237",
      "en_ques": "where is sungkyunkwan university?",
      "en_key": "sungkyunkwan, university",
      "de_ques": "woher ist sungkyunkwan universit\u00e4t? ",
      "de_key": "sungkyunkwan ,  universit\u00e4t ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University dbo:city ?city ; dbo:country ?country }",
      "entities": [
         "Sungkyunkwan_University"
      ],
      "relations": [
         "city",
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University dbo:city ?city ; dbo:country ?country }"
   },
   {
      "id": "238",
      "en_ques": "who is the author of the interpretation of dreams?",
      "en_key": "interpretation of dreams, author",
      "de_ques": "wer ist das autor von das deutung von tr\u00e4ume? ",
      "de_key": "tr\u00e4ume ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
      "entities": [
         "The_Interpretation_of_Dreams"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }"
   },
   {
      "id": "239",
      "en_ques": "when was the death  of  shakespeare?",
      "en_key": "shakespeare",
      "de_ques": "wann war das tod von shakespeare? ",
      "de_key": "shakespeare ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
      "entities": [
         "William_Shakespeare"
      ],
      "relations": [
         "deathDate"
      ],
      "fil_sparql": "SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1"
   },
   {
      "id": "241",
      "en_ques": "who developed slack?",
      "en_key": "developer, slack",
      "de_ques": "wer hat slack entwickelt?",
      "de_key": "slack, entwickler",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product <http://dbpedia.org/resource/Slack_(software)> }",
      "entities": [
         "Slack_(software)"
      ],
      "relations": [
         "product"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:product dbr:Slack_(software) }"
   },
   {
      "id": "242",
      "en_ques": "where is the origin of carolina reaper?",
      "en_key": "carolina reaper",
      "de_ques": "woher ist das ursprung von carolina sensenmann? ",
      "de_key": "carolina sensenmann ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/>PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Carolina_Reaper dbo:origin ?uri}",
      "entities": [
         "Carolina_Reaper"
      ],
      "relations": [
         "origin"
      ],
      "fil_sparql": "SELECT ?uri WHERE { dbr:Carolina_Reaper dbo:origin ?uri}"
   },
   {
      "id": "243",
      "en_ques": "in which year was rachel stevens born?",
      "en_key": "year, born, rachel stevens",
      "de_ques": "in welchem jahr wurde rachel stevens geboren?",
      "de_key": "jahr, geboren, rachel stevens",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
      "entities": [
         "Rachel_Stevens"
      ],
      "relations": [
         "birthYear"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }"
   },
   {
      "id": "244",
      "en_ques": "how often did jane fonda marry?",
      "en_key": "jane fonda, marry, how often",
      "de_ques": "wie oft hat jane fonda geheiratet?",
      "de_key": "jane fonda, heiraten, wie oft",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Jane_Fonda dbo:spouse ?uri }",
      "entities": [
         "Jane_Fonda"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Jane_Fonda dbo:spouse ?uri }"
   },
   {
      "id": "245",
      "en_ques": "was the wife of president lincoln called mary?",
      "en_key": "lincoln, president, wife, called, mary",
      "de_ques": "hie\u00df die frau von pr\u00e4sident lincoln mary?",
      "de_key": "lincoln, pr\u00e4sident, frau, hei\u00dfen, mary",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Abraham_Lincoln dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, 'Mary') }",
      "entities": [
         "Abraham_Lincoln"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "ASK WHERE { res:Abraham_Lincoln dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, 'Mary') }"
   },
   {
      "id": "246",
      "en_ques": "which cities does the weser flow through?",
      "en_key": "weser, flow through, city",
      "de_ques": "durch welche st\u00e4dte flie\u00dft die weser?",
      "de_key": "weser, flie\u00dfen, stadt",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri }",
      "entities": [
         "Weser"
      ],
      "relations": [
         "city"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri }"
   },
   {
      "id": "247",
      "en_ques": "in which programming language is gimp written?",
      "en_key": "gimp, programming language",
      "de_ques": "in welcher programmiersprache wurde gimp geschrieben?",
      "de_key": "gimp, programmiersprache",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri }",
      "entities": [
         "GIMP"
      ],
      "relations": [
         "programmingLanguage"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri }"
   },
   {
      "id": "248",
      "en_ques": "which university did angela merkel attend?",
      "en_key": "university, angela merkel",
      "de_ques": "welche universi\u00e4t hat angela merkel besucht?",
      "de_key": "universit\u00e4t, angela merkel",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
      "entities": [
         "Angela_Merkel"
      ],
      "relations": [
         "almaMater"
      ],
      "fil_sparql": "SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }"
   },
   {
      "id": "249",
      "en_ques": "list all the musicals with music by elton john.",
      "en_key": "musicals, music by, elton john",
      "de_ques": "liste alle musicals mit musik von elton john auf.",
      "de_key": "musicals, musik von, elton john",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
      "entities": [
         "Elton_John"
      ],
      "relations": [
         "Musical",
         "musicBy"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }"
   },
   {
      "id": "250",
      "en_ques": "how many aldi stores are there?",
      "en_key": "own, aldi",
      "de_ques": "wieviele aldi-filialen gibt es?",
      "de_key": "geh\u00f6ren, aldi",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number }",
      "entities": [
         "Aldi"
      ],
      "relations": [
         "numberOfLocations"
      ],
      "fil_sparql": "SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number }"
   },
   {
      "id": "251",
      "en_ques": "what is the longest river in the world?",
      "en_key": "longest river, world",
      "de_ques": "was ist der l\u00e4ngste fluss der welt?",
      "de_key": "l\u00e4ngste fluss, welt",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:BodyOfWater ; dbo:length ?length } ORDER BY DESC(?length) LIMIT 1",
      "entities": [],
      "relations": [
         "BodyOfWater",
         "length"
      ],
      "fil_sparql": "SELECT ?uri WHERE { ?uri rdf:type dbo:BodyOfWater ; dbo:length ?length } ORDER BY DESC(?length) LIMIT 1"
   },
   {
      "id": "252",
      "en_ques": "when was john adams born?",
      "en_key": "john adams, born",
      "de_ques": "wann wurde john adams geboren?",
      "de_key": "john adams, geboren",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
      "entities": [
         "John_Adams"
      ],
      "relations": [
         "birthDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }"
   },
   {
      "id": "253",
      "en_ques": "which companies produce hovercrafts?",
      "en_key": "companies, produce, hovercrafts",
      "de_ques": "welche firmen stellen hovercrafts her?",
      "de_key": "firma, herstellen, hovercraft",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:product res:Hovercraft }",
      "entities": [
         "Hovercraft"
      ],
      "relations": [
         "Company",
         "product"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:product res:Hovercraft }"
   },
   {
      "id": "254",
      "en_ques": "who was the wife of u.s. president lincoln?",
      "en_key": "u.s. president, lincoln, wife",
      "de_ques": "wer war die frau von us-pr\u00e4sident lincoln?",
      "de_key": "us-pr\u00e4sident, lincoln, frau",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri }",
      "entities": [
         "Abraham_Lincoln"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri }"
   },
   {
      "id": "255",
      "en_ques": "which species does an elephant belong?",
      "en_key": "species, elephant",
      "de_ques": "welche spezies tut ein elefant geh\u00f6ren? ",
      "de_key": "spezies ,  elefant ",
      "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?species WHERE { dbr:Elephant dbp:species ?species }",
      "entities": [
         "Elephant"
      ],
      "relations": [
         "species"
      ],
      "fil_sparql": "SELECT ?species WHERE { dbr:Elephant dbp:species ?species }"
   },
   {
      "id": "256",
      "en_ques": "how many people live in the capital of australia?",
      "en_key": "australia, capital, people, live",
      "de_ques": "wieviele menschen leben in der hauptstadt australiens?",
      "de_key": "australien, hauptstadt, menschen, leben",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
      "entities": [
         "Australia"
      ],
      "relations": [
         "capital",
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }"
   },
   {
      "id": "257",
      "en_ques": "in which ancient empire could you pay with cocoa beans?",
      "en_key": "ancient empire, pay, cocoa beans",
      "de_ques": "in welchem alten reich konnte man mit kakaobohnen bezahlen?",
      "de_key": "altes reich, bezahlen, kakaobohnen",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:currency res:Cocoa_bean }",
      "entities": [
         "Cocoa_bean"
      ],
      "relations": [
         "currency"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:currency res:Cocoa_bean }"
   },
   {
      "id": "258",
      "en_ques": "how many theories did albert einstein come up with?",
      "en_key": "theories, albert einstein, come up",
      "de_ques": "wie viele theorien hat albert einstein formuliert?",
      "de_key": "theorien, albert einstein, formuliert",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { dbr:Albert_Einstein dbo:knownFor ?uri }",
      "entities": [
         "Albert_Einstein"
      ],
      "relations": [
         "knownFor"
      ],
      "fil_sparql": "SELECT (COUNT(?uri) AS ?count) WHERE { dbr:Albert_Einstein dbo:knownFor ?uri }"
   },
   {
      "id": "259",
      "en_ques": "who composed the soundtrack for cameron's titanic?",
      "en_key": "compose, soundtrack, cameron's titanic",
      "de_ques": "wer hat den soundtrack f\u00fcr camerons titanic geschrieben?",
      "de_key": "cameron, titanic, soundtrack, geschrieben",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> dbo:musicComposer ?uri }",
      "entities": [
         "Titanic_(1997_film)"
      ],
      "relations": [
         "musicComposer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { dbr:Titanic_(1997_film) dbo:musicComposer ?uri }"
   },
   {
      "id": "260",
      "en_ques": "give me the runtime of toy story.",
      "en_key": "runtime, toy story",
      "de_ques": "gib mir die laufzeit von toy story.",
      "de_key": "laufzeit, toy story",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
      "entities": [
         "Toy_Story"
      ],
      "relations": [
         "runtime"
      ],
      "fil_sparql": "SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }"
   },
   {
      "id": "262",
      "en_ques": "with how many countries iran has borders?",
      "en_key": "iran, borders",
      "de_ques": "mit wie viele l\u00e4nder ich rannte hat grenzen? ",
      "de_key": "ich rannte ,  grenzen ",
      "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?border WHERE { dbr:Geography_of_Iran dbp:borders ?border } LIMIT 8",
      "entities": [
         "Geography_of_Iran"
      ],
      "relations": [
         "borders"
      ],
      "fil_sparql": "SELECT ?border WHERE { dbr:Geography_of_Iran dbp:borders ?border } LIMIT 8"
   },
   {
      "id": "263",
      "en_ques": "which electronics companies were founded in beijing?",
      "en_key": "electronics companies, founded, beijing",
      "de_ques": "welche elektronikunternehmen wurden in peking gegr\u00fcndet?",
      "de_key": "elektronikunternehmen, gegr\u00fcndet in, peking",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:industry res:Electronics ; dbo:foundationPlace res:Beijing }",
      "entities": [
         "Electronics",
         "Beijing"
      ],
      "relations": [
         "Company",
         "industry",
         "foundationPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:industry res:Electronics ; dbo:foundationPlace res:Beijing }"
   },
   {
      "id": "264",
      "en_ques": "who was the successor of john f. kennedy?",
      "en_key": "john f. kennedy, successor",
      "de_ques": "wer war der nachfolger von john f. kennedy?",
      "de_key": "john f. kennedy, nachfolger",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:successor ?uri }",
      "entities": [
         "John_F._Kennedy"
      ],
      "relations": [
         "successor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:successor ?uri }"
   },
   {
      "id": "265",
      "en_ques": "who is the mayor of paris?",
      "en_key": "mayor of paris",
      "de_ques": "wer ist b\u00fcrgermeister von paris?",
      "de_key": "paris, b\u00fcrgermeister",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?uri }",
      "entities": [
         "Paris"
      ],
      "relations": [
         "mayor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?uri }"
   },
   {
      "id": "266",
      "en_ques": "did arnold schwarzenegger attend a university?",
      "en_key": "arnold schwarzenegger, attend, university",
      "de_ques": "hat arnold schwarzenegger eine universit\u00e4t besucht?",
      "de_key": "arnold schwarzenegger, universit\u00e4t, besucht",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Arnold_Schwarzenegger dbo:almaMater ?x . ?x rdf:type dbo:University }",
      "entities": [
         "Arnold_Schwarzenegger"
      ],
      "relations": [
         "almaMater",
         "University"
      ],
      "fil_sparql": "ASK WHERE { res:Arnold_Schwarzenegger dbo:almaMater ?x . ?x rdf:type dbo:University }"
   },
   {
      "id": "267",
      "en_ques": "is james bond married?",
      "en_key": "james bond, married",
      "de_ques": "ist james bond verheiratet?",
      "de_key": "james bond, verheiratet",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:James_Bond dbo:spouse ?uri }",
      "entities": [
         "James_Bond"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "ASK WHERE { res:James_Bond dbo:spouse ?uri }"
   },
   {
      "id": "268",
      "en_ques": "does the isar flow into a lake?",
      "en_key": "isar, flow, lake",
      "de_ques": "flie\u00dft die isar in einen see?",
      "de_key": "isar, flie\u00dft, see",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?x dbo:inflow res:Isar ; rdf:type dbo:Lake }",
      "entities": [
         "Isar"
      ],
      "relations": [
         "inflow",
         "Lake"
      ],
      "fil_sparql": "ASK WHERE { ?x dbo:inflow res:Isar ; rdf:type dbo:Lake }"
   },
   {
      "id": "269",
      "en_ques": "which indian company has the most employees?",
      "en_key": "indian company, the most employees",
      "de_ques": "welches indische unternehmen hat die meisten angestellten?",
      "de_key": "unternehmen, indien, die meisten angestellten",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:location res:India ; dbo:numberOfEmployees ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
      "entities": [
         "India"
      ],
      "relations": [
         "Company",
         "location",
         "numberOfEmployees"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:location res:India ; dbo:numberOfEmployees ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1"
   },
   {
      "id": "270",
      "en_ques": "who was john f. kennedy's vice president?",
      "en_key": "john f. kennedy, vice president",
      "de_ques": "wer war der vizepr\u00e4sident unter john f. kennedy?",
      "de_key": "john f. kennedy, vizepr\u00e4sident",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri }",
      "entities": [
         "John_F._Kennedy"
      ],
      "relations": [
         "vicePresident"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri }"
   },
   {
      "id": "271",
      "en_ques": "which country does the creator of miffy come from?",
      "en_key": "miffy, creator, country",
      "de_ques": "aus welchem land kommt der erfinder von nijntje?",
      "de_key": "nijntje, erfinder, land",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri }",
      "entities": [
         "Miffy"
      ],
      "relations": [
         "creator",
         "nationality"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri }"
   },
   {
      "id": "273",
      "en_ques": "in what city is the heineken brewery?",
      "en_key": "city, heineken brewery",
      "de_ques": "in welcher stadt ist die heinekenbrauerei?",
      "de_key": "stadt, heinekenbrauerei",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Heineken dbo:manufacturer ?x . ?x dbo:locationCity ?uri }",
      "entities": [
         "Heineken"
      ],
      "relations": [
         "manufacturer",
         "locationCity"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Heineken dbo:manufacturer ?x . ?x dbo:locationCity ?uri }"
   },
   {
      "id": "274",
      "en_ques": "is barack obama a democrat?",
      "en_key": "barack obama, democrat",
      "de_ques": "ist barack obama ein demokrat?",
      "de_key": "barack obama, demokrat",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:party <http://dbpedia.org/resource/Democratic_Party_(United_States)> }",
      "entities": [
         "Democratic_Party_(United_States)",
         "Barack_Obama"
      ],
      "relations": [
         "party"
      ],
      "fil_sparql": "ASK WHERE { res:Barack_Obama dbo:party dbr:Democratic_Party_(United_States) }"
   },
   {
      "id": "275",
      "en_ques": "list the children of margaret thatcher.",
      "en_key": "margaret thatcher, child",
      "de_ques": "liste die kinder von margaret thatcher auf.",
      "de_key": "margaret thatcher, kind",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri }",
      "entities": [
         "Margaret_Thatcher"
      ],
      "relations": [
         "child"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri }"
   },
   {
      "id": "276",
      "en_ques": "from which region is the melon de bourgogne?",
      "en_key": "region, melon de bourgogne",
      "de_ques": "aus welcher region ist der melon de bourgogne?",
      "de_key": "region, melon de bourgogne",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Melon_de_Bourgogne dbo:wineRegion ?uri }",
      "entities": [
         "Melon_de_Bourgogne"
      ],
      "relations": [
         "wineRegion"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Melon_de_Bourgogne dbo:wineRegion ?uri }"
   },
   {
      "id": "278",
      "en_ques": "how big is the total area of north rhine- westphalia?",
      "en_key": "nord rhine westphalia",
      "de_ques": "wie gro\u00df ist das gesamt bereich von norden rhein- westfalen? ",
      "de_key": "norden rhein westfalen ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
      "entities": [
         "North_Rhine-Westphalia"
      ],
      "relations": [
         "areaTotal"
      ],
      "fil_sparql": "SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }"
   },
   {
      "id": "279",
      "en_ques": "which city has the most inhabitants?",
      "en_key": "city, the most inhabitants",
      "de_ques": "welche stadt hat die meisten einwohner?",
      "de_key": "stadt, meisten einwohner",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "City",
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1"
   },
   {
      "id": "280",
      "en_ques": "what is donald trump's main business?",
      "en_key": "donald trump's, business",
      "de_ques": "was ist donald trumps main gesch\u00e4ft? ",
      "de_key": "donald trumps ,  gesch\u00e4ft ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
      "entities": [
         "Donald_Trump"
      ],
      "relations": [
         "owner"
      ],
      "fil_sparql": "SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }"
   },
   {
      "id": "281",
      "en_ques": "when will start the final match of the football world cup 2018?",
      "en_key": "football world cup 2018",
      "de_ques": "wann werden anfang das finale spiel von das fu\u00dfball welt tasse 2018? ",
      "de_key": "fu\u00dfball welt tasse 2018 ",
      "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1",
      "entities": [
         "2018_FIFA_World_Cup"
      ],
      "relations": [
         "date"
      ],
      "fil_sparql": "SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1"
   },
   {
      "id": "282",
      "en_ques": "which films did stanley kubrick direct?",
      "en_key": "film, stanley kubrick, direct",
      "de_ques": "bei wievielen filmen hat stanley kubrick regie gef\u00fchrt?",
      "de_key": "wieviele, filme, stanley kubrick, regie",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
      "entities": [
         "Stanley_Kubrick"
      ],
      "relations": [
         "director"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }"
   },
   {
      "id": "283",
      "en_ques": "how much is the population  iraq?",
      "en_key": "iraq",
      "de_ques": "wie viel ist das population irak? ",
      "de_key": "irak ",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
      "entities": [
         "Iraq"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }"
   },
   {
      "id": "284",
      "en_ques": "how many inhabitants does the largest city in canada have?",
      "en_key": "inhabitants, largest city, canada",
      "de_ques": "wieviele einwohner hat die gr\u00f6\u00dfte stadt in kanada?",
      "de_key": "einwohner, gr\u00f6\u00dfte stadt, kanada",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Canada dbo:largestCity ?city . ?city dbo:populationTotal ?num }",
      "entities": [
         "Canada"
      ],
      "relations": [
         "largestCity",
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { res:Canada dbo:largestCity ?city . ?city dbo:populationTotal ?num }"
   },
   {
      "id": "285",
      "en_ques": "who is the mayor of the capital of french polynesia?",
      "en_key": "mayor, capital, french polynesia",
      "de_ques": "wer ist der b\u00fcrgermeister der hauptstadt von franz\u00f6sisch-polynesien?",
      "de_key": "b\u00fcrgermeister, hauptstadt, franz\u00f6sisch-polynesien",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:French_Polynesia dbo:capital ?x . ?x dbo:mayor ?uri }",
      "entities": [
         "French_Polynesia"
      ],
      "relations": [
         "capital",
         "mayor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:French_Polynesia dbo:capital ?x . ?x dbo:mayor ?uri }"
   },
   {
      "id": "286",
      "en_ques": "give me all actors starring in movies directed by william shatner.",
      "en_key": "actor, starring, movie, direct, william shatner",
      "de_ques": "gib mir alle schauspieler von filmen, in denen william shatner regie gef\u00fchrt hat.",
      "de_key": "schauspieler, film, regie, william shatner",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
      "entities": [
         "William_Shatner"
      ],
      "relations": [
         "director",
         "starring"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }"
   },
   {
      "id": "287",
      "en_ques": "how tall is claudia schiffer?",
      "en_key": "claudia schiffer, tall",
      "de_ques": "wie gro\u00df ist claudia schiffer?",
      "de_key": "claudia schiffer, gro\u00df",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
      "entities": [
         "Claudia_Schiffer"
      ],
      "relations": [
         "height"
      ],
      "fil_sparql": "SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }"
   },
   {
      "id": "288",
      "en_ques": "how much is the population densty rank of germany?",
      "en_key": "germany",
      "de_ques": "wie viel ist das population dichte rang von deutschland? ",
      "de_key": "deutschland ",
      "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?rank WHERE { dbr:Germany dbp:populationDensityRank ?rank }",
      "entities": [
         "Germany"
      ],
      "relations": [
         "populationDensityRank"
      ],
      "fil_sparql": "SELECT ?rank WHERE { dbr:Germany dbp:populationDensityRank ?rank }"
   },
   {
      "id": "289",
      "en_ques": "what is the highest mountain in italy?",
      "en_key": "highest, mountain, italy",
      "de_ques": "was ist der h\u00f6chste berg in italien?",
      "de_key": "h\u00f6chste, berg, italien",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
      "entities": [
         "Italy"
      ],
      "relations": [
         "Mountain",
         "locatedInArea",
         "elevation"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
   },
   {
      "id": "290",
      "en_ques": "list all games by gmt.",
      "en_key": "game, gmt",
      "de_ques": "liste alle spiele von gmt auf.",
      "de_key": "spiel, gmt",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
      "entities": [
         "GMT_Games"
      ],
      "relations": [
         "publisher"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }"
   },
   {
      "id": "291",
      "en_ques": "what is the official language of suriname?",
      "en_key": "suriname, official language",
      "de_ques": "was ist die amtssprache von surinam?",
      "de_key": "surinam, amtssprache",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri }",
      "entities": [
         "Suriname"
      ],
      "relations": [
         "officialLanguage"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri }"
   },
   {
      "id": "292",
      "en_ques": "in which city did nikos kazantzakis die?",
      "en_key": "city, nikos kazantzakis, die",
      "de_ques": "in welcher stadt ist nikos kazantzakis gestorben?",
      "de_key": "nikos kazantzakis, stadt, gestorben",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nikos_Kazantzakis dbo:deathPlace ?uri . ?uri rdf:type dbo:Town }",
      "entities": [
         "Nikos_Kazantzakis"
      ],
      "relations": [
         "deathPlace",
         "Town"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Nikos_Kazantzakis dbo:deathPlace ?uri . ?uri rdf:type dbo:Town }"
   },
   {
      "id": "293",
      "en_ques": "what is in a chocolate chip cookie?",
      "en_key": "ingredients, chocolate chip cookie",
      "de_ques": "was ist in chocolate chip cookies drin?",
      "de_key": "zutaten, chocolate chip cookie",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chocolate_chip_cookie dbo:ingredient ?uri }",
      "entities": [
         "Chocolate_chip_cookie"
      ],
      "relations": [
         "ingredient"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Chocolate_chip_cookie dbo:ingredient ?uri }"
   },
   {
      "id": "294",
      "en_ques": "in which country is the limerick lake?",
      "en_key": "limerick lake, country",
      "de_ques": "in welchem land befindet sich der limerick lake?",
      "de_key": "limerick lake, land",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
      "entities": [
         "Limerick_Lake"
      ],
      "relations": [
         "country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }"
   },
   {
      "id": "295",
      "en_ques": "give me all video games published by mean hamster software.",
      "en_key": "video game, publish, mean hamster software",
      "de_ques": "gib mir alle videospiele von mean hamster software.",
      "de_key": "videospiel, mean hamster software",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame ; dbo:publisher res:Mean_Hamster_Software }",
      "entities": [
         "Mean_Hamster_Software"
      ],
      "relations": [
         "VideoGame",
         "publisher"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame ; dbo:publisher res:Mean_Hamster_Software }"
   },
   {
      "id": "296",
      "en_ques": "give me all members of prodigy.",
      "en_key": "member, prodigy",
      "de_ques": "gib mir alle bandmitglieder von prodigy.",
      "de_key": "bandmitglied, prodigy",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri }",
      "entities": [
         "The_Prodigy"
      ],
      "relations": [
         "bandMember"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri }"
   },
   {
      "id": "297",
      "en_ques": "in which time zone is rome?",
      "en_key": "time zone, rome",
      "de_ques": "in welcher zeitzone liegt rom?",
      "de_key": "rom, zeitzone",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rome dbo:timeZone ?uri }",
      "entities": [
         "Rome"
      ],
      "relations": [
         "timeZone"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Rome dbo:timeZone ?uri }"
   },
   {
      "id": "298",
      "en_ques": "how high is the lighthouse in colombo?",
      "en_key": "high, lighthouse in colombo",
      "de_ques": "wie hoch ist der leuchtturm in colombo?",
      "de_key": "hoch, leuchtturm in colombo",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Colombo_Lighthouse dbo:height ?num }",
      "entities": [
         "Colombo_Lighthouse"
      ],
      "relations": [
         "height"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { res:Colombo_Lighthouse dbo:height ?num }"
   },
   {
      "id": "299",
      "en_ques": "who are the writers of the wall album of pink floyd?",
      "en_key": "the wall, pink floyd",
      "de_ques": "wer sind das schriftsteller von das mauer album von rosa floyd? ",
      "de_key": "das mauer ",
      "sparql": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }",
      "entities": [
         "The_Wall"
      ],
      "relations": [
         "writer"
      ],
      "fil_sparql": "SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }"
   },
   {
      "id": "300",
      "en_ques": "who is the mayor of rotterdam?",
      "en_key": "mayor, rotterdam",
      "de_ques": "wer ist der b\u00fcrgermeister von rotterdam?",
      "de_key": "b\u00fcrgermeister, rotterdam",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rotterdam dbo:leaderName ?uri }",
      "entities": [
         "Rotterdam"
      ],
      "relations": [
         "leaderName"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Rotterdam dbo:leaderName ?uri }"
   },
   {
      "id": "301",
      "en_ques": "what is the largest city in australia?",
      "en_key": "australia, largest city",
      "de_ques": "was ist die gr\u00f6\u00dfte stadt in australien?",
      "de_key": "australien, gr\u00f6\u00dfte stadt",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri }",
      "entities": [
         "Australia"
      ],
      "relations": [
         "largestCity"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri }"
   },
   {
      "id": "302",
      "en_ques": "who was married to president chirac?",
      "en_key": "married to, president chirac",
      "de_ques": "wer war mit pr\u00e4sident chirac verheiratet?",
      "de_key": "verheiratet mit, p\u00e4sident chirac",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Jacques_Chirac dbo:spouse ?uri }",
      "entities": [
         "Jacques_Chirac"
      ],
      "relations": [
         "spouse"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Jacques_Chirac dbo:spouse ?uri }"
   },
   {
      "id": "303",
      "en_ques": "what form of government is found in south africa?",
      "en_key": "form, government, south africa",
      "de_ques": "welche regierungsform hat s\u00fcdafrika?",
      "de_key": "regierungsform, s\u00fcdafrika",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:South_Africa dbo:governmentType ?uri }",
      "entities": [
         "South_Africa"
      ],
      "relations": [
         "governmentType"
      ],
      "fil_sparql": "SELECT ?uri WHERE { dbr:South_Africa dbo:governmentType ?uri }"
   },
   {
      "id": "304",
      "en_ques": "how high is the yokohama marine tower?",
      "en_key": "height, yokohama marine tower",
      "de_ques": "wie hoch ist der yokohama marine tower?",
      "de_key": "h\u00f6he, yokohama marine tower",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
      "entities": [
         "Yokohama_Marine_Tower"
      ],
      "relations": [
         "height"
      ],
      "fil_sparql": "SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }"
   },
   {
      "id": "305",
      "en_ques": "which holidays are celebrated around the world? test2",
      "en_key": "holidays, celebrated, world",
      "de_ques": "welche feiertage werden auf der welt gefeiert? test1",
      "de_key": "feiertage, welt, gefeiert",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
      "entities": [],
      "relations": [
         "Holiday"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }"
   },
   {
      "id": "306",
      "en_ques": "who is the tallest basketball player?",
      "en_key": "tallest, basketball player",
      "de_ques": "wer ist der gr\u00f6\u00dfte basketballspieler?",
      "de_key": "gr\u00f6\u00dfter, basketballspieler",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:BasketballPlayer ; dbo:height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "BasketballPlayer",
         "height"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:BasketballPlayer ; dbo:height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
   },
   {
      "id": "307",
      "en_ques": "how many languages are spoken in turkmenistan?",
      "en_key": "languages, turkmenistan",
      "de_ques": "wieviele sprachen werden in turkmenistan gesprochen?",
      "de_key": "sprachen, turkmenistan",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { res:Turkmenistan dbo:language ?x }",
      "entities": [
         "Turkmenistan"
      ],
      "relations": [
         "language"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { res:Turkmenistan dbo:language ?x }"
   },
   {
      "id": "308",
      "en_ques": "did che guevara have children?",
      "en_key": "children, che guevara",
      "de_ques": "hatte che guevara kinder?",
      "de_key": "kinder, che guevara",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Che_Guevara dbo:child ?uri }",
      "entities": [
         "Che_Guevara"
      ],
      "relations": [
         "child"
      ],
      "fil_sparql": "ASK WHERE { res:Che_Guevara dbo:child ?uri }"
   },
   {
      "id": "309",
      "en_ques": "did kaurism\u00e4ki ever win the grand prix at cannes?",
      "en_key": "kaurism\u00e4ki, winner, grand prix at cannes",
      "de_ques": "hat kaurism\u00e4ki jemals den gro\u00dfen preis der jury in cannes gewonnen?",
      "de_key": "kaurism\u00e4ki, gro\u00dfer preis der jury, cannes",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aki_Kaurism\u00e4ki dbo:award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }",
      "entities": [
         "Grand_Prix_(Cannes_Film_Festival)",
         "Aki_Kaurism\u00e4ki"
      ],
      "relations": [
         "award"
      ],
      "fil_sparql": "ASK WHERE { res:Aki_Kaurism\u00e4ki dbo:award dbr:Grand_Prix_(Cannes_Film_Festival) }"
   },
   {
      "id": "310",
      "en_ques": "to which party does the mayor of paris belong?",
      "en_key": "party, mayor of paris, belong",
      "de_ques": "welcher partei geh\u00f6rt die b\u00fcrgermeisterin von paris an?",
      "de_key": "paris, b\u00fcrgermeisterin, partei",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?x . ?x dbo:party ?uri }",
      "entities": [
         "Paris"
      ],
      "relations": [
         "mayor",
         "party"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?x . ?x dbo:party ?uri }"
   },
   {
      "id": "311",
      "en_ques": "who is the formula 1 race driver with the most races?",
      "en_key": "formula 1, race driver, races, most",
      "de_ques": "wer ist der formel-1-fahrer mit den meisten rennen?",
      "de_key": "formel 1, rennfahrer, rennen, meiste",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer ; dbo:races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "FormulaOneRacer",
         "races"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer ; dbo:races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1"
   },
   {
      "id": "312",
      "en_ques": "what country is sitecore from?",
      "en_key": "country, sitecore",
      "de_ques": "aus welchem land kommt sitecore?",
      "de_key": "sitecore, land",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sitecore dbo:foundationPlace ?uri }",
      "entities": [
         "Sitecore"
      ],
      "relations": [
         "foundationPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Sitecore dbo:foundationPlace ?uri }"
   },
   {
      "id": "313",
      "en_ques": "give me the birth place of frank sinatra.",
      "en_key": "birth place, frank sinatra",
      "de_ques": "gib mir den geburtsort von frank sinatra.",
      "de_key": "geburtsort, frank sinatra",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
      "entities": [
         "Frank_Sinatra"
      ],
      "relations": [
         "birthPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }"
   },
   {
      "id": "314",
      "en_ques": "is christian bale starring in velvet goldmine?",
      "en_key": "christian bale, starring, velvet goldmine",
      "de_ques": "spielt christian bale in velvet goldmine mit?",
      "de_key": "christian bale, spielt mit, velvet goldmine",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale }",
      "entities": [
         "Velvet_Goldmine",
         "Christian_Bale"
      ],
      "relations": [
         "starring"
      ],
      "fil_sparql": "ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale }"
   },
   {
      "id": "315",
      "en_ques": "who is the son of sonny and cher?",
      "en_key": "son, sonny and cher",
      "de_ques": "wer ist der sohn von sonny und cher?",
      "de_key": "sonny, cher, sohn",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:parent res:Cher ; dbo:parent res:Sonny_Bono }",
      "entities": [
         "Cher",
         "Sonny_Bono"
      ],
      "relations": [
         "parent",
         "parent"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:parent res:Cher ; dbo:parent res:Sonny_Bono }"
   },
   {
      "id": "316",
      "en_ques": "how many ethnic groups live in slovenia?",
      "en_key": "how many, ethnic groups, slovenia",
      "de_ques": "wieviele ethnische gruppen leben in slovenien?",
      "de_key": "anzahl, ethnische gruppen, slovenien",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Slovenia dbo:ethnicGroup ?uri }",
      "entities": [
         "Slovenia"
      ],
      "relations": [
         "ethnicGroup"
      ],
      "fil_sparql": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Slovenia dbo:ethnicGroup ?uri }"
   },
   {
      "id": "317",
      "en_ques": "what is the capital of cameroon?",
      "en_key": "capital, cameroon",
      "de_ques": "was ist die hauptstadt von kamerun?",
      "de_key": "hauptstadt, kamerun",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
      "entities": [
         "Cameroon"
      ],
      "relations": [
         "capital"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }"
   },
   {
      "id": "318",
      "en_ques": "was natalie portman born in the united states?",
      "en_key": "natalie portman, born, united states",
      "de_ques": "wurde natalie portman in den vereinigten staaten geboren?",
      "de_key": "natalie portman, geboren, vereinigte staaten",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Natalie_Portman dbo:birthPlace ?city . ?city dbo:country res:United_States }",
      "entities": [
         "Natalie_Portman",
         "United_States"
      ],
      "relations": [
         "birthPlace",
         "country"
      ],
      "fil_sparql": "ASK WHERE { res:Natalie_Portman dbo:birthPlace ?city . ?city dbo:country res:United_States }"
   },
   {
      "id": "319",
      "en_ques": "how many pages does war and peace have?",
      "en_key": "pages, war and peace",
      "de_ques": "wieviele seiten hat krieg und frieden?",
      "de_key": "wieviele, seiten, krieg und frieden",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:War_and_Peace dbo:numberOfPages ?n }",
      "entities": [
         "War_and_Peace"
      ],
      "relations": [
         "numberOfPages"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { res:War_and_Peace dbo:numberOfPages ?n }"
   },
   {
      "id": "320",
      "en_ques": "who is the oldest child of meryl streep?",
      "en_key": "oldest child, meryl streep",
      "de_ques": "wer ist das \u00e4lteste kind von meryl streep?",
      "de_key": "\u00e4ltestes kind, meryl streep",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Meryl_Streep dbo:child ?uri . ?uri dbo:birthDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
      "entities": [
         "Meryl_Streep"
      ],
      "relations": [
         "child",
         "birthDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Meryl_Streep dbo:child ?uri . ?uri dbo:birthDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1"
   },
   {
      "id": "321",
      "en_ques": "which television shows were created by walt disney?",
      "en_key": "television show, create, walt disney",
      "de_ques": "welche fernsehserien hat walt disney entworfen?",
      "de_key": "fernsehserie, entwerfen, walt disney",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
      "entities": [
         "Walt_Disney"
      ],
      "relations": [
         "TelevisionShow",
         "creator"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }"
   },
   {
      "id": "322",
      "en_ques": "what does iycm stand for?",
      "en_key": "iycm, stand for",
      "de_ques": "wof\u00fcr steht iycm?",
      "de_key": "iycm, steht f\u00fcr",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:abbreviation 'IYCM' }",
      "entities": [],
      "relations": [
         "abbreviation"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:abbreviation 'IYCM' }"
   },
   {
      "id": "323",
      "en_ques": "which types of grapes grow in oregon?",
      "en_key": "grape types, grow, oregon",
      "de_ques": "welche traubenarten wachsen in oregon?",
      "de_key": "traubenarten, wachsen, oregon",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Oregon_wine dbo:growingGrape ?uri }",
      "entities": [
         "Oregon_wine"
      ],
      "relations": [
         "growingGrape"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Oregon_wine dbo:growingGrape ?uri }"
   },
   {
      "id": "324",
      "en_ques": "was u.s. president jackson involved in a war?",
      "en_key": "u.s. president, jackson, war",
      "de_ques": "war us-pr\u00e4sident jackson in einen krieg verwickelt?",
      "de_key": "us-pr\u00e4sident, jackson, krieg",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle }",
      "entities": [
         "Andrew_Jackson"
      ],
      "relations": [
         "battle"
      ],
      "fil_sparql": "ASK WHERE { res:Andrew_Jackson dbo:battle ?battle }"
   },
   {
      "id": "325",
      "en_ques": "when was the titanic completed?",
      "en_key": "titanic, completion date",
      "de_ques": "wann wurde die titanic fertiggestellt?",
      "de_key": "titanic, fertiggestellt, datum",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:RMS_Titanic dbo:completionDate ?date }",
      "entities": [
         "RMS_Titanic"
      ],
      "relations": [
         "completionDate"
      ],
      "fil_sparql": "SELECT DISTINCT ?date WHERE { res:RMS_Titanic dbo:completionDate ?date }"
   },
   {
      "id": "326",
      "en_ques": "did tesla win a nobel prize in physics?",
      "en_key": "tesla, nobel prize, physics",
      "de_ques": "hat tesla den nobelpreis f\u00fcr physik gewonnen?",
      "de_key": "tesla, nobelpreis, physik",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics }",
      "entities": [
         "Nikola_Tesla",
         "Nobel_Prize_in_Physics"
      ],
      "relations": [
         "award"
      ],
      "fil_sparql": "ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics }"
   },
   {
      "id": "327",
      "en_ques": "how many states are in mexico?",
      "en_key": "states, mexico",
      "de_ques": "wie viele staaten gibt es in mexiko?",
      "de_key": "staaten, mexiko",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { ?uri dbo:type dbr:States_of_Mexico }",
      "entities": [
         "States_of_Mexico"
      ],
      "relations": [
         "type"
      ],
      "fil_sparql": "SELECT (COUNT(?uri) AS ?count) WHERE { ?uri dbo:type dbr:States_of_Mexico }"
   },
   {
      "id": "328",
      "en_ques": "which scientist is known for the manhattan project and the nobel peace prize?",
      "en_key": "scientist, known for, manhattan project, nobel peace prize",
      "de_ques": "welcher wissenschaftler ist bekannt f\u00fcr das manhattan-projekt und den friedensnobelpreis?",
      "de_key": "wissenschaftler, bekannt f\u00fcr, manhattan-projekt, friedensnobelpreis",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri dbo:knownFor res:Manhattan_Project ; rdf:type dbo:Scientist ; dbo:knownFor res:Nobel_Peace_Prize }",
      "entities": [
         "Manhattan_Project",
         "Nobel_Peace_Prize"
      ],
      "relations": [
         "knownFor",
         "Scientist",
         "knownFor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:knownFor res:Manhattan_Project ; rdf:type dbo:Scientist ; dbo:knownFor res:Nobel_Peace_Prize }"
   },
   {
      "id": "329",
      "en_ques": "how much did the lego movie cost?",
      "en_key": "lego movie, cost",
      "de_ques": "wieviel hat der legofilm gekostet?",
      "de_key": "legofilm, budget",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
      "entities": [
         "The_Lego_Movie"
      ],
      "relations": [
         "budget"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }"
   },
   {
      "id": "330",
      "en_ques": "who composed the music for harold and maude?",
      "en_key": "harold and maude, compose, music",
      "de_ques": "wer hat die musik f\u00fcr harold und maude komponiert?",
      "de_key": "harold und maude, komponieren, musik",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri }",
      "entities": [
         "Harold_and_Maude"
      ],
      "relations": [
         "musicComposer"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri }"
   },
   {
      "id": "331",
      "en_ques": "list all episodes of the first season of the hbo television series the sopranos.",
      "en_key": "hbo, television series, sopranos, first season, episodes",
      "de_ques": "liste alle episoden der ersten staffel der hbo-fernsehserie die sopranos auf.",
      "de_key": "hbo-fernsehserie, sopranos, erste staffel, episoden",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
      "entities": [
         "The_Sopranos"
      ],
      "relations": [
         "series",
         "seasonNumber"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }"
   },
   {
      "id": "332",
      "en_ques": "which city has the least inhabitants?",
      "en_key": "city, the least inhabitants",
      "de_ques": "welche stadt hat die wenigsten einwohner?",
      "de_key": "stadt, wenigsten einwohner",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
      "entities": [],
      "relations": [
         "City",
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1"
   },
   {
      "id": "333",
      "en_ques": "where is syngman rhee buried?",
      "en_key": "syngman rhee, buried",
      "de_ques": "wo liegt syngman rhee begraben?",
      "de_key": "syngman rhee, begraben",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Syngman_Rhee dbo:restingPlace ?uri }",
      "entities": [
         "Syngman_Rhee"
      ],
      "relations": [
         "restingPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Syngman_Rhee dbo:restingPlace ?uri }"
   },
   {
      "id": "334",
      "en_ques": "does neymar play for real madrid?",
      "en_key": "neymar, play, real madrid",
      "de_ques": "spielt neymar f\u00fcr real madrid?",
      "de_key": "neymar, spielt f\u00fcr, real madrid",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Neymar dbo:team <http://dbpedia.org/resource/Real_Madrid_C.F.> }",
      "entities": [
         "Real_Madrid_C.F.",
         "Neymar"
      ],
      "relations": [
         "team"
      ],
      "fil_sparql": "ASK WHERE { res:Neymar dbo:team dbr:Real_Madrid_C.F. }"
   },
   {
      "id": "335",
      "en_ques": "who wrote the book the pillars of the earth?",
      "en_key": "wrote, book, the pillars of the earth",
      "de_ques": "wer schrieb das buch die s\u00e4ulen der erde?",
      "de_key": "geschrieben, buch, die s\u00e4ulen der erde",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
      "entities": [
         "The_Pillars_of_the_Earth"
      ],
      "relations": [
         "author"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }"
   },
   {
      "id": "336",
      "en_ques": "do prince harry and prince william have the same parents?",
      "en_key": "prince harry, prince william, same, parents",
      "de_ques": "haben prinz harry und prinz william dieselben eltern?",
      "de_key": "prinz harry, prinz william, selbe eltern",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbo:parent ?x . res:Prince_Harry dbo:parent ?x }",
      "entities": [
         "Prince_William,_Duke_of_Cambridge",
         "Prince_Harry"
      ],
      "relations": [
         "parent",
         "parent"
      ],
      "fil_sparql": "ASK WHERE { dbr:Prince_William,_Duke_of_Cambridge dbo:parent ?x . res:Prince_Harry dbo:parent ?x }"
   },
   {
      "id": "337",
      "en_ques": "who was the doctoral supervisor of albert einstein?",
      "en_key": "doctoral supervisor, albert einstein",
      "de_ques": "wer war der doktorvater von albert einstein?",
      "de_key": "doktorvater, albert einstein",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
      "entities": [
         "Albert_Einstein"
      ],
      "relations": [
         "doctoralAdvisor"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }"
   },
   {
      "id": "338",
      "en_ques": "does breaking bad have more episodes than game of thrones?",
      "en_key": "breaking bad, episodes, more than, game of thrones",
      "de_ques": "hat breaking bad mehr episoden als game of thrones?",
      "de_key": "breaking bad, episoden, mehr als, game of thrones",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
      "entities": [
         "Breaking_Bad",
         "Game_of_Thrones"
      ],
      "relations": [
         "numberOfEpisodes",
         "numberOfEpisodes"
      ],
      "fil_sparql": "ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }"
   },
   {
      "id": "339",
      "en_ques": "who was vincent van gogh inspired by?",
      "en_key": "person, inspiring, vincent van gogh",
      "de_ques": "wer hat vincent van gogh inspiriert?",
      "de_key": "vincent van gogh, inspiration",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:influenced res:Vincent_van_Gogh }",
      "entities": [
         "Vincent_van_Gogh"
      ],
      "relations": [
         "influenced"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:influenced res:Vincent_van_Gogh }"
   },
   {
      "id": "340",
      "en_ques": "which building after the burj khalifa has the most floors?",
      "en_key": "building, after, burj khalifa, most floors",
      "de_ques": "welches geb\u00e4ude nach dem burj khalifa hat die meisten etagen",
      "de_key": "geb\u00e4ude, nach, burj khalifa, meisten etagen",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Burj_Khalifa dbo:floorCount ?burj . ?uri rdf:type dbo:Building ; dbo:floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1",
      "entities": [
         "Burj_Khalifa"
      ],
      "relations": [
         "floorCount",
         "Building",
         "floorCount"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Burj_Khalifa dbo:floorCount ?burj . ?uri rdf:type dbo:Building ; dbo:floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1"
   },
   {
      "id": "341",
      "en_ques": "what was the final result of the war of the roses?",
      "en_key": "result, war of roses",
      "de_ques": "was war das endergebnis der rosenkriege?",
      "de_key": "endergebnis, rosenkriege",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?result WHERE { ?uri dbo:isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; dbo:result ?result ; dbo:date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
      "entities": [
         "Wars_of_the_Roses"
      ],
      "relations": [
         "isPartOfMilitaryConflict",
         "result",
         "date"
      ],
      "fil_sparql": "SELECT DISTINCT ?result WHERE { ?uri dbo:isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; dbo:result ?result ; dbo:date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1"
   },
   {
      "id": "342",
      "en_ques": "how much did pulp fiction cost?",
      "en_key": "cost, pulp fiction",
      "de_ques": "wieviel hat pulp fiction gekostet?",
      "de_key": "kosten, pulp fiction",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
      "entities": [
         "Pulp_Fiction"
      ],
      "relations": [
         "budget"
      ],
      "fil_sparql": "SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }"
   },
   {
      "id": "343",
      "en_ques": "is proinsulin a protein?",
      "en_key": "proinsulin, protein",
      "de_ques": "ist proinsulin ein protein?",
      "de_key": "proinsulin, protein",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Proinsulin rdf:type dbo:Protein }",
      "entities": [
         "Proinsulin"
      ],
      "relations": [
         "Protein"
      ],
      "fil_sparql": "ASK WHERE { res:Proinsulin rdf:type dbo:Protein }"
   },
   {
      "id": "344",
      "en_ques": "do urdu and persian have a common root?",
      "en_key": "urdu, persian, common root",
      "de_ques": "haben urdu und persisch gemeinsame wurzeln?",
      "de_key": "urdu, persisch, gemeinsame wurzel",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu dbo:languageFamily ?uri . dbr:Persian_language dbo:languageFamily ?uri }",
      "entities": [
         "Urdu",
         "Persian_language"
      ],
      "relations": [
         "languageFamily",
         "languageFamily"
      ],
      "fil_sparql": "ASK WHERE { dbr:Urdu dbo:languageFamily ?uri . dbr:Persian_language dbo:languageFamily ?uri }"
   },
   {
      "id": "345",
      "en_ques": "who is starring in spanish movies produced by benicio del toro?",
      "en_key": "starring, spanish movies, produced, benicio del toro",
      "de_ques": "wer spielt alles in spanischen filmen produziert von benicio del toro mit? ",
      "de_key": "spanische filme, produziert, benicio del toro, hauptrolle",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film ; dbo:country res:Spain ; dbo:producer res:Benicio_del_Toro ; dbo:starring ?uri . ?uri rdf:type dbo:Person }",
      "entities": [
         "Spain",
         "Benicio_del_Toro"
      ],
      "relations": [
         "Film",
         "country",
         "producer",
         "starring",
         "Person"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film ; dbo:country res:Spain ; dbo:producer res:Benicio_del_Toro ; dbo:starring ?uri . ?uri rdf:type dbo:Person }"
   },
   {
      "id": "346",
      "en_ques": "is lake baikal bigger than the great bear lake?",
      "en_key": "lake baikal, bigger than, great bear lake",
      "de_ques": "ist der baikalsee gr\u00f6\u00dfer als der gro\u00dfe b\u00e4rensee?",
      "de_key": "baikalsee, gr\u00f6\u00dfer als, gro\u00dfer b\u00e4rensee",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Lake_Baikal dbo:areaTotal ?a1 . res:Great_Bear_Lake dbo:areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }",
      "entities": [
         "Lake_Baikal",
         "Great_Bear_Lake"
      ],
      "relations": [
         "areaTotal",
         "areaTotal"
      ],
      "fil_sparql": "ASK WHERE { res:Lake_Baikal dbo:areaTotal ?a1 . res:Great_Bear_Lake dbo:areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }"
   },
   {
      "id": "347",
      "en_ques": "show me all books in asimov's foundation series.",
      "en_key": "books, asimov, foundation series",
      "de_ques": "zeig mir alle b\u00fccher in asimovs foundation-serie.",
      "de_key": "asimov, foundation-serie, b\u00fccher",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:Foundation_series }",
      "entities": [
         "Foundation_series"
      ],
      "relations": [
         "series"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:Foundation_series }"
   },
   {
      "id": "348",
      "en_ques": "where was bach born?",
      "en_key": "birthplace, bach",
      "de_ques": "wo wurde bach geboren?",
      "de_key": "bach, geboren",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Johann_Sebastian_Bach dbo:birthPlace ?uri }",
      "entities": [
         "Johann_Sebastian_Bach"
      ],
      "relations": [
         "birthPlace"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Johann_Sebastian_Bach dbo:birthPlace ?uri }"
   },
   {
      "id": "349",
      "en_ques": "which city has the oldest running metro?",
      "en_key": "city, oldest running metro",
      "de_ques": "welche stadt hat die \u00e4lteste funktionierende u-bahn?",
      "de_key": "stadt, \u00e4lteste funktionierende u-bahn",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?loc WHERE { ?uri dbo:type dbr:Rapid_transit ; dbo:openingYear ?date ; dbo:location ?loc . ?loc rdf:type dbo:City } ORDER BY ASC(?date) LIMIT 1",
      "entities": [
         "Rapid_transit"
      ],
      "relations": [
         "type",
         "openingYear",
         "location",
         "City"
      ],
      "fil_sparql": "SELECT ?loc WHERE { ?uri dbo:type dbr:Rapid_transit ; dbo:openingYear ?date ; dbo:location ?loc . ?loc rdf:type dbo:City } ORDER BY ASC(?date) LIMIT 1"
   },
   {
      "id": "350",
      "en_ques": "who designed the brooklyn bridge?",
      "en_key": "brooklyn bridge, design",
      "de_ques": "wer hat die brooklyn bridge entworfen?",
      "de_key": "brooklyn bridge, entwurf",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
      "entities": [
         "Brooklyn_Bridge"
      ],
      "relations": [
         "architect"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }"
   },
   {
      "id": "351",
      "en_ques": "how many people live in eurasia?",
      "en_key": "people, eurasia",
      "de_ques": "wie viele menschen leben in eurasien?",
      "de_key": "population, eurasien",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
      "entities": [
         "Eurasia"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }"
   },
   {
      "id": "352",
      "en_ques": "who is the host of the bbc wildlife specials?",
      "en_key": "host, bbc wildlife specials",
      "de_ques": "wer moderiert die bbc wildlife specials?",
      "de_key": "bbc wildlife specials, moderator",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:BBC_Wildlife_Specials dbo:presenter ?uri }",
      "entities": [
         "BBC_Wildlife_Specials"
      ],
      "relations": [
         "presenter"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:BBC_Wildlife_Specials dbo:presenter ?uri }"
   },
   {
      "id": "353",
      "en_ques": "what is the total population of melbourne, florida?",
      "en_key": "total population, melbourne florida",
      "de_ques": "was ist die gesamteinwohnerzahl von melbourne, florida?",
      "de_key": "gesamteinwohnerzahl, melbourne florida",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Melbourne,_Florida> dbo:populationTotal ?uri }",
      "entities": [
         "Melbourne,_Florida"
      ],
      "relations": [
         "populationTotal"
      ],
      "fil_sparql": "SELECT ?uri WHERE { dbr:Melbourne,_Florida dbo:populationTotal ?uri }"
   },
   {
      "id": "354",
      "en_ques": "what country is mount everest in?",
      "en_key": "country, mount everest",
      "de_ques": "in welchem land ist der mount everest?",
      "de_key": "land, mount everest",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
      "entities": [
         "Mount_Everest"
      ],
      "relations": [
         "locatedInArea",
         "Country"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }"
   },
   {
      "id": "355",
      "en_ques": "to which artistic movement did the painter of the three dancers belong?",
      "en_key": "artistic movement, painter, the three dancers",
      "de_ques": "welcher stilrichtung geh\u00f6rte der maler der drei t\u00e4nzer an?",
      "de_key": "drei t\u00e4nzer, maler, stilrichtung",
      "sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
      "entities": [
         "The_Three_Dancers"
      ],
      "relations": [
         "author",
         "movement"
      ],
      "fil_sparql": "SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }"
   }
]